<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rinah Teng&#39;s paradise</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tomotoes.com/"/>
  <updated>2020-03-20T11:15:27.760Z</updated>
  <id>http://tomotoes.com/</id>
  
  <author>
    <name>Cardiac Dejavu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue2-0-【第四季】第3节-实例事件</title>
    <link href="http://tomotoes.com/posts/68775ecc/"/>
    <id>http://tomotoes.com/posts/68775ecc/</id>
    <published>2020-03-20T10:46:46.000Z</published>
    <updated>2020-03-20T11:15:27.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第四季】第3节-实例事件"><a href="#Vue2-0-【第四季】第3节-实例事件" class="headerlink" title="Vue2.0 【第四季】第3节 实例事件"></a>Vue2.0 【第四季】第3节 实例事件</h1><hr><h2 id="第3节-实例事件"><a href="#第3节-实例事件" class="headerlink" title="第3节 实例事件"></a>第3节 实例事件</h2><p>实例事件就是在构造器外部写一个调用构造器内部的方法。这样写的好处是可以通过这种写法在构造器外部调用构造器内部的数据。</p><p>我们还是写一个点击按钮，持续加1的例子。</p><h3 id="一、-on-在构造器外部添加事件"><a href="#一、-on-在构造器外部添加事件" class="headerlink" title="一、$on 在构造器外部添加事件"></a>一、$on 在构造器外部添加事件</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.$on('reduce',function(){</span><br><span class="line">    console.log('执行了reduce()');</span><br><span class="line">    this.num--;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>$on接收两个参数，第一个参数是调用时的事件名称，第二个参数是一个匿名方法。</p><p>如果按钮在作用域外部，可以利用$emit来执行。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//外部调用内部事件</span><br><span class="line">function reduce(){</span><br><span class="line">    app.$emit('reduce');</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;example03&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;example03&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">{％raw％} </span><br><span class="line">            {{num}}</span><br><span class="line">{％endraw％}</span><br><span class="line">            &lt;p&gt;&lt;button @click="add"&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;p&gt;&lt;button onclick="reduce()"&gt;reduce&lt;/button&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    num:1</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    add:function(){</span><br><span class="line">                        this.num++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            app.$on("reduce",function(){</span><br><span class="line">                console.log("执行了reduce方法");</span><br><span class="line">                this.num--;</span><br><span class="line">            })</span><br><span class="line"></span><br><span class="line">            function reduce(){</span><br><span class="line">                app.$emit('reduce');</span><br><span class="line">            }</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="二、-once执行一次的事件"><a href="#二、-once执行一次的事件" class="headerlink" title="二、$once执行一次的事件"></a>二、$once执行一次的事件</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.$once('reduceOnce',function(){</span><br><span class="line">    console.log('只执行一次的方法');</span><br><span class="line">    this.num--;</span><br><span class="line"></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;example03&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;example03&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            {％raw％} </span><br><span class="line">            {{num}}</span><br><span class="line">{％endraw％}</span><br><span class="line">            &lt;p&gt;&lt;button @click="add"&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;p&gt;&lt;button onclick="reduce()"&gt;reduce&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&lt;button onclick="reduceOnce()"&gt;reduceOnce&lt;/button&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    num:1</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    add:function(){</span><br><span class="line">                        this.num++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            app.$on("reduce",function(){</span><br><span class="line">                console.log("执行了reduce方法");</span><br><span class="line">                this.num--;</span><br><span class="line">            })</span><br><span class="line"></span><br><span class="line">            app.$once('reduceOnce',function(){</span><br><span class="line">                console.log('只执行一次的方法');</span><br><span class="line">                this.num--;</span><br><span class="line"></span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            function reduce(){</span><br><span class="line">                app.$emit('reduce');</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            function reduceOnce(){</span><br><span class="line">                app.$emit('reduceOnce');</span><br><span class="line">            }</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="三、-off关闭事件"><a href="#三、-off关闭事件" class="headerlink" title="三、$off关闭事件"></a>三、$off关闭事件</h3><p>···<br>//关闭事件<br>function off(){<br>   app.$off(‘reduce’);<br>}<br>···</p><p>全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;example03&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;example03&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            {％raw％} </span><br><span class="line">            {{num}}</span><br><span class="line">{％endraw％}</span><br><span class="line">            &lt;p&gt;&lt;button @click="add"&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;p&gt;&lt;button onclick="reduce()"&gt;reduce&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&lt;button onclick="reduceOnce()"&gt;reduceOnce&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&lt;button onclick="off()"&gt;off&lt;/button&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    num:1</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    add:function(){</span><br><span class="line">                        this.num++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            app.$on("reduce",function(){</span><br><span class="line">                console.log("执行了reduce方法");</span><br><span class="line">                this.num--;</span><br><span class="line">            })</span><br><span class="line"></span><br><span class="line">            app.$once('reduceOnce',function(){</span><br><span class="line">                console.log('只执行一次的方法');</span><br><span class="line">                this.num--;</span><br><span class="line"></span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            function reduce(){</span><br><span class="line">                app.$emit('reduce');</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            function reduceOnce(){</span><br><span class="line">                app.$emit('reduceOnce');</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            //关闭事件</span><br><span class="line">            function off(){</span><br><span class="line">                app.$off('reduce');</span><br><span class="line">            }</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第四季】第3节-实例事件&quot;&gt;&lt;a href=&quot;#Vue2-0-【第四季】第3节-实例事件&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第四季】第3节 实例事件&quot;&gt;&lt;/a&gt;Vue2.0 【第四季】第3节 实例事件&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2-0-【第四季】第4节-内置组件-slot讲解</title>
    <link href="http://tomotoes.com/posts/bc1fc6de/"/>
    <id>http://tomotoes.com/posts/bc1fc6de/</id>
    <published>2020-03-20T10:45:02.000Z</published>
    <updated>2020-03-20T11:15:22.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第四季】第4节-内置组件-slot讲解"><a href="#Vue2-0-【第四季】第4节-内置组件-slot讲解" class="headerlink" title="Vue2.0 【第四季】第4节 内置组件 -slot讲解"></a>Vue2.0 【第四季】第4节 内置组件 -slot讲解</h1><hr><h2 id="第4节-内置组件-slot讲解"><a href="#第4节-内置组件-slot讲解" class="headerlink" title="第4节 内置组件 -slot讲解"></a>第4节 内置组件 -slot讲解</h2><p>slot是标签的内容扩展，也就是说：你用slot就可以在自定义组件时传递给组件内容，组件接收内容并输出。</p><p>先来定义一个<code>&lt;da0sy&gt;&lt;/da0sy&gt;</code>的组件，这个组件用来显示博主的一些信息。</p><p>我们在Vue 构造器里的<strong>data</strong>中给出了信息，信息如下：（博客地址，网名，使用技能）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data:{</span><br><span class="line">    da0syData:{</span><br><span class="line">        bolgUrl:'https://www.cnblogs.com/Elva3zora/',</span><br><span class="line">        netName:'da0sy',</span><br><span class="line">        skill:'Web前端'</span><br><span class="line">    }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>我们用<code>&lt;template&gt;&lt;/template&gt;</code>标签的方式定义了组件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id="tmp"&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;博客地址：&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;网名：&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;技术类型：&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure><p>我们现在就可以用slot功能让组件接收传递过来的值，并在模板中接收显示。</p><p>slot的使用需要两步： </p><ul><li><p>1、在HTML的组件中用slot属性传递值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;da0sy&gt;</span><br><span class="line">&lt;span slot="blogUrl"&gt;{{da0syData.blogUrl}}&lt;/span&gt;  //传递</span><br><span class="line">    &lt;span slot="netName"&gt;{{da0syData.netName}}&lt;/span&gt;</span><br><span class="line">    &lt;span slot="skill"&gt;{{da0syData.skill}}&lt;/span&gt;</span><br><span class="line">&lt;/da0sy&gt;</span><br></pre></td></tr></tbody></table></figure></li><li><p>2、在组件模板中用标签接收值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id="tep"&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;p&gt;博客地址：&lt;slot name="blogUrl"&gt;&lt;/slot&gt;&lt;/p&gt;  //接收</span><br><span class="line">        &lt;p&gt;网名：&lt;slot name="netName"&gt;&lt;/slot&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;技术类型：&lt;slot name="skill"&gt;&lt;/slot&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></tbody></table></figure></li></ul><p>我们贴出这个案例的全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;Slot content extend Demo&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;Slot content extend Demo&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;da0sy&gt;</span><br><span class="line">                &lt;span slot="blogUrl"&gt;{{da0syData.blogUrl}}&lt;/span&gt;  //传递</span><br><span class="line">                &lt;span slot="netName"&gt;{{da0syData.netName}}&lt;/span&gt;</span><br><span class="line">                &lt;span slot="skill"&gt;{{da0syData.skill}}&lt;/span&gt;</span><br><span class="line">            &lt;/da0sy&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;template id="tep"&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;博客地址：&lt;slot name="blogUrl"&gt;&lt;/slot&gt;&lt;/p&gt;  </span><br><span class="line">                &lt;p&gt;网名：&lt;slot name="netName"&gt;&lt;/slot&gt;&lt;/p&gt;</span><br><span class="line">                &lt;p&gt;技术类型：&lt;slot name="skill"&gt;&lt;/slot&gt;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var da0sy = {</span><br><span class="line">                template:"#tep"</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    da0syData:{</span><br><span class="line">                        blogUrl:'https://www.cnblogs.com/Elva3zora/',</span><br><span class="line">                        netName:'Cardiac_Dejavu',</span><br><span class="line">                        skill:"web前端"</span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">                components:{</span><br><span class="line">                    "da0sy":da0sy</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第四季】第4节-内置组件-slot讲解&quot;&gt;&lt;a href=&quot;#Vue2-0-【第四季】第4节-内置组件-slot讲解&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第四季】第4节 内置组件 -slot讲解&quot;&gt;&lt;/a&gt;Vue2
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2-0-【第四季】第2节-实例方法</title>
    <link href="http://tomotoes.com/posts/9530e9bf/"/>
    <id>http://tomotoes.com/posts/9530e9bf/</id>
    <published>2020-03-20T10:43:23.000Z</published>
    <updated>2020-03-20T11:15:34.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第四季】第2节-实例方法"><a href="#Vue2-0-【第四季】第2节-实例方法" class="headerlink" title="Vue2.0 【第四季】第2节 实例方法"></a>Vue2.0 【第四季】第2节 实例方法</h1><hr><h2 id="第2节-实例方法"><a href="#第2节-实例方法" class="headerlink" title="第2节 实例方法"></a>第2节 实例方法</h2><h3 id="一、-mount方法"><a href="#一、-mount方法" class="headerlink" title="一、$mount方法"></a>一、$mount方法</h3><p>$mount方法是用来挂载我们的扩展的，我们先来复习一下扩展的写法。</p><p>这里我们作了da0sy的扩展，然后用$mount的方法把da0sy挂载到DOM上，我们也生成了一个Vue的实例，直接看代码。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;Examples Method Demo&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Examples Method Demo&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        {{message}}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">      var da0sy = Vue.extend({</span><br><span class="line">          template:`&lt;p&gt;{{message}}&lt;/p&gt;`,</span><br><span class="line">          data:function(){</span><br><span class="line">              return {</span><br><span class="line">                  message:'Hello ,I am da0sy'</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">      })</span><br><span class="line">      var vm = new da0sy().$mount("#app")</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="二、-destroy-卸载方法"><a href="#二、-destroy-卸载方法" class="headerlink" title="二、$destroy()卸载方法"></a>二、$destroy()卸载方法</h3><p>用$destroy()进行卸载。</p><p>我写了一个button按钮，点击后卸载整个挂载。</p><p>html:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;button onclick="destroy()"&gt;卸载&lt;/button&gt;&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>js:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function destroy(){</span><br><span class="line">   vm.$destroy();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;Examples Method Demo&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Examples Method Demo&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        {{message}}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;&lt;button onclick="destroy()"&gt;卸载&lt;/button&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">      var da0sy = Vue.extend({</span><br><span class="line">          template:`&lt;p&gt;{{message}}&lt;/p&gt;`,</span><br><span class="line">          data:function(){</span><br><span class="line">              return {</span><br><span class="line">                  message:'Hello ,I am da0sy'</span><br><span class="line">              }</span><br><span class="line">          },</span><br><span class="line">          mounted:function(){</span><br><span class="line">            console.log("mounted 被创建！");</span><br><span class="line">          },</span><br><span class="line">          destroyed:function(){</span><br><span class="line">              console.log("destroy 销毁之后");</span><br><span class="line">          }</span><br><span class="line">      })</span><br><span class="line">      var vm = new da0sy().$mount("#app");</span><br><span class="line"></span><br><span class="line">      function destroy(){</span><br><span class="line">          vm.$destroy();</span><br><span class="line">      }</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>PS:$destroy()后边必须要有括号，没有括号是无用的。</p><h3 id="三、-forceUpdate-更新方法"><a href="#三、-forceUpdate-更新方法" class="headerlink" title="三、$forceUpdate()更新方法"></a>三、$forceUpdate()更新方法</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.$forceUpdate();</span><br></pre></td></tr></tbody></table></figure><p>全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;Examples Method Demo&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Examples Method Demo&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        {{message}}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;&lt;button onclick="destroy()"&gt;卸载&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;button onclick="reload()"&gt;刷新&lt;/button&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">      var da0sy = Vue.extend({</span><br><span class="line">          template:`&lt;p&gt;{{message}}&lt;/p&gt;`,</span><br><span class="line">          data:function(){</span><br><span class="line">              return {</span><br><span class="line">                  message:'Hello ,I am da0sy'</span><br><span class="line">              }</span><br><span class="line">          },</span><br><span class="line">          mounted:function(){</span><br><span class="line">            console.log("mounted 被创建！");</span><br><span class="line">          },</span><br><span class="line">          destroyed:function(){</span><br><span class="line">              console.log("destroy 销毁之后");</span><br><span class="line">          }</span><br><span class="line">      })</span><br><span class="line">      var vm = new da0sy().$mount("#app");</span><br><span class="line"></span><br><span class="line">      function destroy(){</span><br><span class="line">          vm.$destroy();</span><br><span class="line">      }</span><br><span class="line">      function reload(){</span><br><span class="line">          vm.$forceUpdate();</span><br><span class="line">      }</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./5.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="四、-nextTick-数据修改方法"><a href="#四、-nextTick-数据修改方法" class="headerlink" title="四、$nextTick()数据修改方法"></a>四、$nextTick()数据修改方法</h3><p>当Vue构造器里的data值被修改完成后会调用这个方法，相当于一个钩子函数，和构造器里的updated生命周期很像。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function tick(){</span><br><span class="line">    vm.message="update message info ";</span><br><span class="line">    vm.$nextTick(function(){</span><br><span class="line">        console.log('message更新完后我被调用了');</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>同样的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;Examples Method Demo&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Examples Method Demo&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        {{message}}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;&lt;button onclick="destroy()"&gt;卸载&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;button onclick="reload()"&gt;刷新&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;button onclick="tick()"&gt;更改数据&lt;/button&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">      var da0sy = Vue.extend({</span><br><span class="line">          template:`&lt;p&gt;{{message}}&lt;/p&gt;`,</span><br><span class="line">          data:function(){</span><br><span class="line">              return {</span><br><span class="line">                  message:'Hello ,I am da0sy'</span><br><span class="line">              }</span><br><span class="line">          },</span><br><span class="line">          mounted:function(){</span><br><span class="line">            console.log("mounted 被创建！");</span><br><span class="line">          },</span><br><span class="line">          destroyed:function(){</span><br><span class="line">              console.log("destroy 销毁之后");</span><br><span class="line">          },</span><br><span class="line">          updated:function(){</span><br><span class="line">              console.log("update 更新之后");</span><br><span class="line">          }</span><br><span class="line">      })</span><br><span class="line">      var vm = new da0sy().$mount("#app");</span><br><span class="line"></span><br><span class="line">      function destroy(){</span><br><span class="line">          vm.$destroy();</span><br><span class="line">      }</span><br><span class="line">      function reload(){</span><br><span class="line">          vm.$forceUpdate();</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      function tick(){</span><br><span class="line">        vm.message="update message info ";</span><br><span class="line">        vm.$nextTick(function(){</span><br><span class="line">            console.log('message更新完后我被调用了');</span><br><span class="line">        })</span><br><span class="line">      }</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./6.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第四季】第2节-实例方法&quot;&gt;&lt;a href=&quot;#Vue2-0-【第四季】第2节-实例方法&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第四季】第2节 实例方法&quot;&gt;&lt;/a&gt;Vue2.0 【第四季】第2节 实例方法&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第四季】第1节 实例入门-实例属性</title>
    <link href="http://tomotoes.com/posts/99aca906/"/>
    <id>http://tomotoes.com/posts/99aca906/</id>
    <published>2020-03-20T10:40:37.000Z</published>
    <updated>2020-03-20T11:15:38.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第四季】第1节-实例入门-实例属性"><a href="#Vue2-0-【第四季】第1节-实例入门-实例属性" class="headerlink" title="Vue2.0 【第四季】第1节 实例入门-实例属性"></a>Vue2.0 【第四季】第1节 实例入门-实例属性</h1><hr><h2 id="第1节-实例入门-实例属性"><a href="#第1节-实例入门-实例属性" class="headerlink" title="第1节 实例入门-实例属性"></a>第1节 实例入门-实例属性</h2><p>概述：实例就是在构造器外部操作构造器内部的属性选项或者方法，就叫做实例？实例的作用就是给原生的或者其他javascript框架一个融合的接口或者说是机会，让Vue和其他框架一起使用。</p><h3 id="一、Vue和Jquery-js一起使用"><a href="#一、Vue和Jquery-js一起使用" class="headerlink" title="一、Vue和Jquery.js一起使用"></a>一、Vue和Jquery.js一起使用</h3><h4 id="下载并引入jQuery框架"><a href="#下载并引入jQuery框架" class="headerlink" title="下载并引入jQuery框架"></a>下载并引入jQuery框架</h4><p>下载可以去官网进行下载，我这里使用的版本是3.4.1，下载好后在需要的页面引入就可以了。当然你还有很多其它的方法引入jquery，只要可以顺利引入就可以了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="text/javascript" src="../assets/js/jquery-3.4.1.min.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>试着做一个案例，在DOM被挂载后修改里边的内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;example methods Demo&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/jquery-3.4.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;example methods Demo&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            {{message}}</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    message:'hello world!'</span><br><span class="line">                },</span><br><span class="line">                mounted:function(){</span><br><span class="line">                    $("#app").html('我是jQuery~！');</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>现在页面显示是：我是jQuery，而不是hello Vue了。</p><h3 id="二、实例调用自定义方法"><a href="#二、实例调用自定义方法" class="headerlink" title="二、实例调用自定义方法"></a>二、实例调用自定义方法</h3><p>在Vue的构造器里我们写一个add方法，然后我们用实例的方法调用它。</p><p>构造器里的add方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:{</span><br><span class="line">    add:function(){</span><br><span class="line">        console.log("调用了ADD方法");</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实例调用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.add();</span><br></pre></td></tr></tbody></table></figure><p>全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;example methods Demo&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/jquery-3.4.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;example methods Demo&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            {{message}}</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    message:'hello world!'</span><br><span class="line">                },</span><br><span class="line">                mounted:function(){</span><br><span class="line">                    $("#app").html('我是jQuery~！');</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    add:function(){</span><br><span class="line">                        console.log("调用了构造器内部的ADD方法");</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line"></span><br><span class="line">            app.add();</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>PS：我们有可能把app.add()的括号忘记或省略，这时候我们得到的就是<strong>方法的字符串</strong>，但是并没有执行，所以必须要加上括号。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第四季】第1节-实例入门-实例属性&quot;&gt;&lt;a href=&quot;#Vue2-0-【第四季】第1节-实例入门-实例属性&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第四季】第1节 实例入门-实例属性&quot;&gt;&lt;/a&gt;Vue2.0 【第四季
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>ES6 第四节 扩展运算符和rest运算符</title>
    <link href="http://tomotoes.com/posts/a0b5abf4/"/>
    <id>http://tomotoes.com/posts/a0b5abf4/</id>
    <published>2020-03-20T10:38:56.000Z</published>
    <updated>2020-03-20T11:17:28.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-第四节-扩展运算符和rest运算符"><a href="#ES6-第四节-扩展运算符和rest运算符" class="headerlink" title="ES6 第四节 扩展运算符和rest运算符"></a>ES6 第四节 扩展运算符和rest运算符</h1><p>@(ES6)[ES6]</p><hr><p>[toc]</p><h2 id="第四节-扩展运算符和rest运算符"><a href="#第四节-扩展运算符和rest运算符" class="headerlink" title="第四节 扩展运算符和rest运算符"></a>第四节 扩展运算符和rest运算符</h2><p>扩展运算符和rest运算符，都是…（三个点）。它们可以很好的为我们解决<strong>参数</strong>和<strong>对象数组未知</strong>情况下的编程，让我们的代码更健壮和简洁。</p><h3 id="对象扩展运算符（…）："><a href="#对象扩展运算符（…）：" class="headerlink" title="对象扩展运算符（…）："></a>对象扩展运算符（…）：</h3><p>当编写一个方法时，我们允许它传入的参数是不确定的。这时候可以<strong>使用对象扩展运算符来作参数</strong>，看一个简单的列子：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function da0sy(...arg){</span><br><span class="line">    console.log(arg[0]);</span><br><span class="line">    console.log(arg[1]);</span><br><span class="line">    console.log(arg[2]);</span><br><span class="line">    console.log(arg[3]);</span><br><span class="line">}</span><br><span class="line">da0sy(1,2,3);</span><br></pre></td></tr></tbody></table></figure><p>这时我们看到控制台输出了 1，2，3，undefined，这说明是可以传入多个值，并且就算方法中引用多了也不会报错。</p><h4 id="扩展运算符的用处："><a href="#扩展运算符的用处：" class="headerlink" title="扩展运算符的用处："></a>扩展运算符的用处：</h4><p>我们先用一个例子说明，我们声明两个数组arr1和arr2，然后我们把arr1赋值给arr2，然后我们改变arr2的值，会发现arr1的值也变了，因为我们这是对内存堆栈的引用，而不是真正的赋值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr1=['w','dd','aaa'];</span><br><span class="line">let arr2=arr1;</span><br><span class="line">console.log(arr2);</span><br><span class="line">arr2.push('todo');</span><br><span class="line">console.log(arr1);</span><br></pre></td></tr></tbody></table></figure><p>控制台输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">["w", "dd", "aaa"]</span><br><span class="line">["w", "dd", "aaa", "todo"]</span><br></pre></td></tr></tbody></table></figure><p>可以利用对象扩展运算符解决这个问题，改一下代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr1=['w','dd','aaa'];</span><br><span class="line">//let arr2=arr1;</span><br><span class="line">let arr2=[...arr1];  //表示arr1里的每一个元素</span><br><span class="line">console.log(arr2);</span><br><span class="line">arr2.push('todo');</span><br><span class="line">console.log(arr2);</span><br><span class="line">console.log(arr1);</span><br></pre></td></tr></tbody></table></figure><p>现在的结果就变成：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">["w", "dd", "aaa"]</span><br><span class="line">["w", "dd", "aaa", "todo"]</span><br><span class="line">["w", "dd", "aaa"]  //arr1的值并没有改变</span><br></pre></td></tr></tbody></table></figure><h3 id="rest运算符"><a href="#rest运算符" class="headerlink" title="rest运算符"></a>rest运算符</h3><p>eg：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function da0sy(first,...arg){</span><br><span class="line">    console.log(arg.length);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">da0sy(0,1,2,3,4,5,6,7);</span><br></pre></td></tr></tbody></table></figure><p>控制台打印出7，说明arg里有7个数组元素，这就是rest运算符的最简单用法。</p><h4 id="如何循环输出rest运算符"><a href="#如何循环输出rest运算符" class="headerlink" title="如何循环输出rest运算符"></a>如何循环输出rest运算符</h4><p>这里我们用<strong>for…of循环</strong>来进行打印出arg的值，只是一个简单的使用。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function da0sy(first,...arg){</span><br><span class="line">    for(let val of arg){</span><br><span class="line">        console.log(val);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">da0sy(0,1,2,3,4,5,6,7);</span><br></pre></td></tr></tbody></table></figure><p>for…of的循环可以避免我们开拓内存空间，增加代码运行效率，虽然最后要转换成ES5，没有什么差别，但是至少从代码量上我们少打了一些单词，这就是开发效率的提高。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6-第四节-扩展运算符和rest运算符&quot;&gt;&lt;a href=&quot;#ES6-第四节-扩展运算符和rest运算符&quot; class=&quot;headerlink&quot; title=&quot;ES6 第四节 扩展运算符和rest运算符&quot;&gt;&lt;/a&gt;ES6 第四节 扩展运算符和rest运算符&lt;/
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="http://tomotoes.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6 第六节 ES6数字操作</title>
    <link href="http://tomotoes.com/posts/266d507b/"/>
    <id>http://tomotoes.com/posts/266d507b/</id>
    <published>2020-03-20T10:36:01.000Z</published>
    <updated>2020-03-20T11:17:37.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-第六节-ES6数字操作"><a href="#ES6-第六节-ES6数字操作" class="headerlink" title="ES6 第六节 ES6数字操作"></a>ES6 第六节 ES6数字操作</h1><p>@(ES6)[ES6]</p><hr><p>[toc]</p><h2 id="第六节-ES6数字操作"><a href="#第六节-ES6数字操作" class="headerlink" title="第六节 ES6数字操作"></a>第六节 ES6数字操作</h2><h3 id="二进制和八进制"><a href="#二进制和八进制" class="headerlink" title="二进制和八进制"></a>二进制和八进制</h3><p>二进制和八进制数字的声明并不是ES6的特性，做一个常识性的回顾。</p><h4 id="二进制声明："><a href="#二进制声明：" class="headerlink" title="二进制声明："></a>二进制声明：</h4><p>二进制的英文单词是Binary，二进制的开始是0（零），第二个位置是b（大小写都可以实现），然后跟上二进制的值就可以了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//二进制声明 Binary</span><br><span class="line">let binary = 0B010101;</span><br><span class="line">console.log(binary);</span><br></pre></td></tr></tbody></table></figure><p>控制台输出：21</p><h4 id="八进制声明："><a href="#八进制声明：" class="headerlink" title="八进制声明："></a>八进制声明：</h4><p>八进制的英文单词是Octal，也是以0（零）开始的，第二个位置是O（欧），然后跟上八进制的值就可以了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let Octal=0o666;</span><br><span class="line">console.log(Octal);</span><br></pre></td></tr></tbody></table></figure><p>控制台输出：438</p><h3 id="数字判断和转换"><a href="#数字判断和转换" class="headerlink" title="数字判断和转换"></a>数字判断和转换</h3><h4 id="数字验证Number-isFinite-xx"><a href="#数字验证Number-isFinite-xx" class="headerlink" title="数字验证Number.isFinite(xx)"></a>数字验证Number.isFinite(xx)</h4><p>可以使用<strong>Number.isFinite( )</strong>来进行数字验证，只要是数字，不论是浮点型还是整型都会返回true，其他时候会返回false。 </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a= 11/4;</span><br><span class="line">console.log(Number.isFinite(a));//true</span><br><span class="line">console.log(Number.isFinite('da0sy'));//false</span><br><span class="line">console.log(Number.isFinite(NaN));//false</span><br><span class="line">console.log(Number.isFinite(undefined));//false</span><br></pre></td></tr></tbody></table></figure><h4 id="NaN验证"><a href="#NaN验证" class="headerlink" title="NaN验证"></a>NaN验证</h4><p>NaN是特殊的非数字，可以使用<strong>Number.isNaN()</strong>来进行验证。下边的代码控制台返回了true。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.isNaN(NaN));</span><br></pre></td></tr></tbody></table></figure><h4 id="判断是否为整数Number-isInteger-xx"><a href="#判断是否为整数Number-isInteger-xx" class="headerlink" title="判断是否为整数Number.isInteger(xx)"></a>判断是否为整数Number.isInteger(xx)</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a=123.1;</span><br><span class="line">console.log(Number.isInteger(a)); //false</span><br></pre></td></tr></tbody></table></figure><h4 id="整数转换Number-parseInt-xxx-和浮点型转换Number-parseFloat-xxx"><a href="#整数转换Number-parseInt-xxx-和浮点型转换Number-parseFloat-xxx" class="headerlink" title="整数转换Number.parseInt(xxx)和浮点型转换Number.parseFloat(xxx)"></a>整数转换Number.parseInt(xxx)和浮点型转换Number.parseFloat(xxx)</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a='9.18';</span><br><span class="line">console.log(Number.parseInt(a));   //9</span><br><span class="line">console.log(Number.parseFloat(a));  //9.18</span><br></pre></td></tr></tbody></table></figure><h4 id="整数取值范围操作"><a href="#整数取值范围操作" class="headerlink" title="整数取值范围操作"></a>整数取值范围操作</h4><p>整数的操作是有一个取值范围的，它的取值范围就是2的53次方。我们先用程序来看一下这个数字是什么。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = Math.pow(2,53)-1;</span><br><span class="line">console.log(a); //9007199254740991</span><br></pre></td></tr></tbody></table></figure><p>在我们计算时会经常超出这个值，所以我们要进行判断，ES6提供了一个常数，叫做最大安全整数，以后就不需要我们计算了。</p><h4 id="最大安全整数"><a href="#最大安全整数" class="headerlink" title="最大安全整数"></a>最大安全整数</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.MAX_SAFE_INTEGER);//就是9007...上面那个数值</span><br></pre></td></tr></tbody></table></figure><h4 id="最小安全整数"><a href="#最小安全整数" class="headerlink" title="最小安全整数"></a>最小安全整数</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(Number.MIN_SAFE_INTEGER);  //是-9007...</span><br></pre></td></tr></tbody></table></figure><h4 id="安全整数判断isSafeInteger"><a href="#安全整数判断isSafeInteger" class="headerlink" title="安全整数判断isSafeInteger()"></a>安全整数判断isSafeInteger()</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a= Math.pow(2,53)-1;  //2的53次方</span><br><span class="line">console.log(Number.isSafeInteger(a));//true，安全</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6-第六节-ES6数字操作&quot;&gt;&lt;a href=&quot;#ES6-第六节-ES6数字操作&quot; class=&quot;headerlink&quot; title=&quot;ES6 第六节 ES6数字操作&quot;&gt;&lt;/a&gt;ES6 第六节 ES6数字操作&lt;/h1&gt;&lt;p&gt;@(ES6)[ES6]&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="http://tomotoes.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6 第五节 字符串模板</title>
    <link href="http://tomotoes.com/posts/5d5807df/"/>
    <id>http://tomotoes.com/posts/5d5807df/</id>
    <published>2020-03-20T10:32:04.000Z</published>
    <updated>2020-03-20T11:17:25.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-第五节-字符串模板"><a href="#ES6-第五节-字符串模板" class="headerlink" title="ES6 第五节 字符串模板"></a>ES6 第五节 字符串模板</h1><p>@(ES6)[ES6]</p><hr><p>[TOC]</p><h2 id="第五节-字符串模板"><a href="#第五节-字符串模板" class="headerlink" title="第五节 字符串模板"></a>第五节 字符串模板</h2><p>ES6对<strong>字符串新增</strong>的操作，最重要的就是<font color="red"><strong>字符串模版</strong></font>，字符串模版的出现让我们再也<strong>不用拼接变量</strong>了，而且支持在模板里有<strong>简单计算</strong>操作。</p><h3 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h3><p>先来看一个在ES5下我们的字符串拼接案例：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let da0sy='黛西';</span><br><span class="line">let blog = '很高兴遇见你，我是你的老朋友'+da0sy+'。这节课我们学习字符串模版。';</span><br><span class="line">document.write(blog);</span><br></pre></td></tr></tbody></table></figure><p>ES5下必须用+da0sy+这样的形式进行拼接，这样很麻烦而且很容易出错。<br>ES6新增了字符串模版，可以很好的解决这个问题。字符串模版不再使用‘xxx’这样的单引号，而是换成了xxx这种形式，也叫连接号。这时我们再引用da0sy变量就需要用${da0sy}这种形式了，我们对上边的代码进行改造:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let da0sy='黛西';</span><br><span class="line">let blog = `很高兴遇见你，我是你的老朋友${da0sy}。这节课我们学习字符串模版。`;</span><br><span class="line">document.write(blog);</span><br></pre></td></tr></tbody></table></figure><p>可以看到浏览器出现了和上边代码一样的结果。<br>而且这里面支持html标签，可以试着输入一些：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let da0sy='黛西';</span><br><span class="line">let blog = `很高兴遇见你，我是你的老朋友${da0sy}。&lt;br/&gt;这节课我们学习字符串模版。`;</span><br><span class="line">document.write(blog);</span><br></pre></td></tr></tbody></table></figure><h4 id="对运算的支持"><a href="#对运算的支持" class="headerlink" title="对运算的支持"></a>对运算的支持</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let a=1;</span><br><span class="line">let b=2;</span><br><span class="line">let result=`${a+b}`;</span><br><span class="line">document.write(result);</span><br></pre></td></tr></tbody></table></figure><p>页面输出为3.<br>强大的字符串模版，在实际开发中，我们可以让后台写一个活动页面，然后轻松的输出给用户。</p><h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><p>ES6还增加了字符串的查找功能，而且支持中文。</p><h4 id="查找是否存在："><a href="#查找是否存在：" class="headerlink" title="查找是否存在："></a>查找是否存在：</h4><p>先来看一下ES5的写法，其实这种方法并不实用，给我们的索引位置，我们自己还要确定位置。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let da0sy = '黛西';</span><br><span class="line">let blog = '很高兴遇见你，我是你的老朋友黛西。这节课我们学习字符串模版。';</span><br><span class="line">document.write(blog.indexOf(da0sy));</span><br></pre></td></tr></tbody></table></figure><p>网页中输出了14，我们还要自己判断。</p><p>ES6直接用<strong>includes</strong>就可以判断，不再返回索引值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let da0sy = '黛西';</span><br><span class="line">let blog = '很高兴遇见你，我是你的老朋友黛西。这节课我们学习字符串模版。';</span><br><span class="line">document.write(blog.includes(da0sy));</span><br></pre></td></tr></tbody></table></figure><p>网页输出true，说明这句话里有黛西。</p><h4 id="判断开头是否存在："><a href="#判断开头是否存在：" class="headerlink" title="判断开头是否存在："></a>判断开头是否存在：</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.startsWith(da0sy);</span><br></pre></td></tr></tbody></table></figure><h4 id="判断结尾是否存在："><a href="#判断结尾是否存在：" class="headerlink" title="判断结尾是否存在："></a>判断结尾是否存在：</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.endsWith(da0sy);</span><br></pre></td></tr></tbody></table></figure><h3 id="复制字符串"><a href="#复制字符串" class="headerlink" title="复制字符串"></a>复制字符串</h3><p>我们有时候是需要字符串重复的，比如分隔符和特殊符号，这时候复制字符串就派上用场了，语法很简单。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write('da0sy|'.repeat(3));</span><br></pre></td></tr></tbody></table></figure><p>网页输出：da0sy|da0sy|da0sy|</p><p>ES6对字符串还有一些其它操作，自行查询。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6-第五节-字符串模板&quot;&gt;&lt;a href=&quot;#ES6-第五节-字符串模板&quot; class=&quot;headerlink&quot; title=&quot;ES6 第五节 字符串模板&quot;&gt;&lt;/a&gt;ES6 第五节 字符串模板&lt;/h1&gt;&lt;p&gt;@(ES6)[ES6]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[T
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="http://tomotoes.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue2-0-【第二季】第9节-Component-标签</title>
    <link href="http://tomotoes.com/posts/5c8856d1/"/>
    <id>http://tomotoes.com/posts/5c8856d1/</id>
    <published>2020-03-20T10:07:24.955Z</published>
    <updated>2020-03-20T11:22:15.279Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Vue2.0 【第二季】第9节 Component 标签<br>abbrlink: 126c4f17<br>date: 2020-03-15 11:41:02<br>tags: vue 2.0</p><hr><h1 id="Vue2-0-【第二季】第9节-Component-标签"><a href="#Vue2-0-【第二季】第9节-Component-标签" class="headerlink" title="Vue2.0 【第二季】第9节 Component 标签"></a>Vue2.0 【第二季】第9节 Component 标签</h1><hr><h2 id="第9节-Component-标签"><a href="#第9节-Component-标签" class="headerlink" title="第9节 Component 标签"></a>第9节 Component 标签</h2><p>component标签是Vue框架自定义的标签，它的用途就是可以动态绑定我们的组件，根据数据的不同更换不同的组件。</p><h3 id="1、我们先在构造器外部定义三个不同的组件，分别是componentA-componentB和componentC"><a href="#1、我们先在构造器外部定义三个不同的组件，分别是componentA-componentB和componentC" class="headerlink" title="1、我们先在构造器外部定义三个不同的组件，分别是componentA,componentB和componentC"></a>1、我们先在构造器外部定义三个不同的组件，分别是componentA,componentB和componentC</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var componentA={</span><br><span class="line">template:`&lt;div style="color:red"&gt;I'm componentA.&lt;/div&gt;`</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">var componentB={</span><br><span class="line">template:`div style="color:green"&gt;I'm componentB.&lt;/div&gt;`</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">var componentC={</span><br><span class="line">template:`&lt;div style="color:pink"&gt;I'm componentC.&lt;/div&gt;`</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、我们在构造器的components选项里加入这三个组件"><a href="#2、我们在构造器的components选项里加入这三个组件" class="headerlink" title="2、我们在构造器的components选项里加入这三个组件"></a>2、我们在构造器的components选项里加入这三个组件</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">who:'componentA'</span><br><span class="line">},</span><br><span class="line">components:{</span><br><span class="line">"componentA":componentA,</span><br><span class="line">"componentB":componentB,</span><br><span class="line">"componentC":componentC,</span><br><span class="line">}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="3、我们在html里插入component标签，并绑定who数据，根据who的值不同，调用不同的组件"><a href="#3、我们在html里插入component标签，并绑定who数据，根据who的值不同，调用不同的组件" class="headerlink" title="3、我们在html里插入component标签，并绑定who数据，根据who的值不同，调用不同的组件"></a>3、我们在html里插入component标签，并绑定who数据，根据who的值不同，调用不同的组件</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">&lt;component v-bind:is="who"&gt;&lt;/component&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>这就是我们的组件标签的基本用法。我们提高一下，给页面加个按钮，每点一下更换一个组件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;component-4&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;component-4&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;component v-bind:is="who"&gt;&lt;/component&gt;</span><br><span class="line">            &lt;button @click="changeComponent"&gt;changeComponent&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var componentA={</span><br><span class="line">template:`&lt;div style="color:red"&gt;I'm componentA.&lt;/div&gt;`</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">var componentB={</span><br><span class="line">template:`div style="color:green"&gt;I'm componentB.&lt;/div&gt;`</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">var componentC={</span><br><span class="line">template:`&lt;div style="color:pink"&gt;I'm componentC.&lt;/div&gt;`</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    who:'componentA'</span><br><span class="line">                },</span><br><span class="line">                components:{</span><br><span class="line">                    "componentA":componentA,</span><br><span class="line">                    "componentB":componentB,</span><br><span class="line">                    "componentC":componentC,</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    changeComponent:function(){</span><br><span class="line">                        if(this.who=='componentA'){</span><br><span class="line">                            this.who='componentB';</span><br><span class="line">                        }else if(this.who=='componentB'){</span><br><span class="line">                            this.who='componentC';</span><br><span class="line">                        }else{</span><br><span class="line">                            this.who='componentA';</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./7.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./8.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./9.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: Vue2.0 【第二季】第9节 Component 标签&lt;br&gt;abbrlink: 126c4f17&lt;br&gt;date: 2020-03-15 11:41:02&lt;br&gt;tags: vue 2.0&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Vue2-0-【第二季
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://tomotoes.com/posts/16107/"/>
    <id>http://tomotoes.com/posts/16107/</id>
    <published>2020-03-19T11:55:41.387Z</published>
    <updated>2020-03-20T03:03:41.117Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ES6 第三节 变量的解构赋值</title>
    <link href="http://tomotoes.com/posts/3079772d/"/>
    <id>http://tomotoes.com/posts/3079772d/</id>
    <published>2020-03-19T08:13:10.000Z</published>
    <updated>2020-03-20T11:17:33.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-第三节-变量的解构赋值"><a href="#ES6-第三节-变量的解构赋值" class="headerlink" title="ES6 第三节 变量的解构赋值"></a>ES6 第三节 变量的解构赋值</h1><hr><h2 id="第三节-变量的解构赋值"><a href="#第三节-变量的解构赋值" class="headerlink" title="第三节 变量的解构赋值"></a>第三节 变量的解构赋值</h2><p>ES6允许按照一定模式，从<strong>数组</strong>和<strong>对象</strong>中提取值，对变量进行赋值，这被称为解构。解构赋值在实际开发中可以大量减少我们的代码量，并且让我们的程序结构更清晰。也许你还是不太明白，那先来一个最简单的数组解构赋值来进行赋值。</p><h3 id="数据的解构赋值"><a href="#数据的解构赋值" class="headerlink" title="数据的解构赋值"></a>数据的解构赋值</h3><p>以前，为变量赋值，我们只能直接指定值。比如下面的代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let a=0;</span><br><span class="line">let b=1;</span><br><span class="line">let c=2;</span><br></pre></td></tr></tbody></table></figure><p>而现在我们可以用数组解构的方式来进行赋值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let  [a,b,c]=[1,2,3];</span><br></pre></td></tr></tbody></table></figure><p>上面的代码表示，可以从数组中提取值，按照位置的对象关系对变量赋值。</p><h3 id="数组模式和赋值模式统一："><a href="#数组模式和赋值模式统一：" class="headerlink" title="数组模式和赋值模式统一："></a>数组模式和赋值模式统一：</h3><p>可以简单的理解为等号左边和等号右边的形式要统一，如果不统一解构将失败。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let [a,[b,c],d]=[1,[2,3],4];</span><br></pre></td></tr></tbody></table></figure><p>如果等号两边形式不一样，很可能获得undefined或者直接报错。</p><h3 id="解构的默认值："><a href="#解构的默认值：" class="headerlink" title="解构的默认值："></a>解构的默认值：</h3><p>解构赋值是允许你使用默认值的，先看一个最简单的默认true的例子。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [foo = true] =[];</span><br><span class="line">console.log(foo);  //控制台打印出true</span><br></pre></td></tr></tbody></table></figure><p>上边的例子数组中只有一个值，可能你会多少有些疑惑，我们就来个多个值的数组，并给他一些默认值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [a,b="Da0sy"]=['黛西']</span><br><span class="line">console.log(a+b);  //控制台显示“黛西Da0sy”</span><br></pre></td></tr></tbody></table></figure><p>现在我们对<strong>默认值</strong>有所了解，需要注意的是<strong>undefined和null的区别</strong>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [a,b="Da0sy"]=['黛西',undefined];</span><br><span class="line">console.log(a+b); //控制台显示“黛西Da0sy”</span><br></pre></td></tr></tbody></table></figure><p>undefined相当于什么都没有，b是默认值。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let [a,b="Da0sy"]=['黛西',null];</span><br><span class="line">console.log(a+b); //控制台显示“黛西null”</span><br></pre></td></tr></tbody></table></figure><p><strong>null相当于有值，但值为null。</strong>所以b并没有取默认值，而是解构成了null。</p><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><p>解构不仅可以用于数组，还可以用于对象。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let {foo,bar} = {foo:'Da0sy',bar:'黛西'};</span><br><span class="line">console.log(foo+bar); //控制台打印出了“Da0sy黛西”</span><br></pre></td></tr></tbody></table></figure><p>注意：对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><h3 id="圆括号的使用"><a href="#圆括号的使用" class="headerlink" title="圆括号的使用"></a>圆括号的使用</h3><p>如果在解构之前就定义了变量，这时候你再解构会出现问题。下面是错误的代码，编译会报错。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let foo;</span><br><span class="line">{foo} ={foo:'Da0sy'};</span><br><span class="line">console.log(foo);</span><br></pre></td></tr></tbody></table></figure><p>要解决报错，使程序正常，我们这时候只要在解构的语句外边加一个圆括号就可以了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let foo;</span><br><span class="line">({foo} ={foo:'Da0sy'});</span><br><span class="line">console.log(foo); //控制台输出Da0sy</span><br></pre></td></tr></tbody></table></figure><h3 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h3><p>字符串也可以解构，这是因为，此时字符串被转换成了一个类似数组的<strong>对象</strong>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const [a,b,c,d,e]="Da0sy";</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(b);</span><br><span class="line">console.log(c);</span><br><span class="line">console.log(d);</span><br><span class="line">console.log(e);</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./ds.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>实战项目中解构Json数据格式还是很普遍的，有了ES6得帮助，提高了不少工作效率。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6-第三节-变量的解构赋值&quot;&gt;&lt;a href=&quot;#ES6-第三节-变量的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;ES6 第三节 变量的解构赋值&quot;&gt;&lt;/a&gt;ES6 第三节 变量的解构赋值&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;第三节-变量的解
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="http://tomotoes.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6 第二节 新的声明方式</title>
    <link href="http://tomotoes.com/posts/38faf734/"/>
    <id>http://tomotoes.com/posts/38faf734/</id>
    <published>2020-03-19T08:12:07.000Z</published>
    <updated>2020-03-20T11:17:40.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-第二节-新的声明方式"><a href="#ES6-第二节-新的声明方式" class="headerlink" title="ES6 第二节 新的声明方式"></a>ES6 第二节 新的声明方式</h1><hr><h2 id="第二节-新的声明方式"><a href="#第二节-新的声明方式" class="headerlink" title="第二节 新的声明方式"></a>第二节 新的声明方式</h2><p>以前我们在声明时只有一种方法，就是使用var来进行声明，ES6对声明的进行了扩展，现在可以有三种声明方式了。</p><p><strong>字面理解ES6的三种声明方式：</strong></p><ul><li><code>var</code>：它是variable的简写，可以理解成变量的意思。</li><li><code>let</code>：它在英文中是“让”的意思，也可以理解为一种声明的意思。</li><li><code>const</code>：它在英文中也是常量的意思，在ES6也是用来声明常量的，常量你可以简单理解为不变的量。</li></ul><h3 id="var声明："><a href="#var声明：" class="headerlink" title="var声明："></a>var声明：</h3><p>var在ES6里是用来升级<strong>全局变量</strong>的，我们可以先作一个最简单的实例，用var声明一个变量a,然后用console.log进行输出。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a='Da0sy';</span><br><span class="line">console.log(a);</span><br></pre></td></tr></tbody></table></figure><p>我们可以看到Da0sy在控制台已经被打印出来了。那如何理解它的作用是声明全局变量呢？我们用匿名函数给他进行一个包裹，然后在匿名函数中调用这个a变量，看看能不能调用到。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a="Da0sy";</span><br><span class="line">window.onload= function(){</span><br><span class="line">    console.log(a);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到控制台输出了Da0sy，这证明var确实是全局的。如果你觉得这个不够直观说明var是全局声明，还可以用区块的方式进行调用测试，先看下面的代码。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a=2;</span><br><span class="line">{</span><br><span class="line">   var a=3;</span><br><span class="line">}</span><br><span class="line">console.log(a);</span><br></pre></td></tr></tbody></table></figure><p>这时打印出来的值是3，因为var是全局声明的。</p><h3 id="let局部声明"><a href="#let局部声明" class="headerlink" title="let局部声明"></a>let局部声明</h3><p>通过两个简单的例子，我们对var的全局声明有了一定了解。那跟var相对应的是let，它是局部变量声明。还是上面的例子，我们试着在区块里用let声明。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a=2;</span><br><span class="line">{</span><br><span class="line">   let a=3;</span><br><span class="line">}</span><br><span class="line">console.log(a);</span><br></pre></td></tr></tbody></table></figure><p>这时候控制台打印出来的值就是2了。如果我们只在区块里声明，不再外部声明，我们打印a时就会报错，显示找不到变量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">   let a=3;</span><br><span class="line">}</span><br><span class="line">console.log(a);</span><br></pre></td></tr></tbody></table></figure><p>上面两个例子说明了let是<strong>局部变量</strong>声明，let声明只在区块内起作用，外部是不可以调用的。</p><p>有些刚接触JavaScript的小伙伴会疑惑了，我感觉let还没有var好用，其实let是防止你的数据污染的，在大型项目中是非常有用处的。现在看一个循环的例子，我们来看一下let的好处。</p><h4 id="用var声明的循环"><a href="#用var声明的循环" class="headerlink" title="用var声明的循环"></a>用var声明的循环</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(let i=0;i&lt;10;i++){</span><br><span class="line">console.log('循环体中:'+i);</span><br><span class="line">}</span><br><span class="line">console.log('循环体外:'+i);</span><br></pre></td></tr></tbody></table></figure><p>执行时会发现控制台报错，找不到循环体外的i变量。</p><p>通过两种声明的比较，可以明白let在防止程序数据污染上还是很有用处的。我们要努力去习惯用let声明，减少var声明去污染全局空间，在vue的使用中也要注意这点。</p><h3 id="const声明常量"><a href="#const声明常量" class="headerlink" title="const声明常量"></a>const声明常量</h3><p>在程序开发中，有些变量是希望声明后在业务层就不再发生变化了，简单来说就是从声明开始，这个变量<strong>始终不变</strong>，就需要用const进行声明。</p><p>我们来一段用const声明错误的代码，在错误中学习const的特性也是非常好的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const a="Da0sy";</span><br><span class="line">var a='黛西';</span><br><span class="line">console.log(a);</span><br></pre></td></tr></tbody></table></figure><p>在编译这段代码的过程中，就已经报错，无法编译，原因就是我们const声明的变量是不可以改变的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6-第二节-新的声明方式&quot;&gt;&lt;a href=&quot;#ES6-第二节-新的声明方式&quot; class=&quot;headerlink&quot; title=&quot;ES6 第二节 新的声明方式&quot;&gt;&lt;/a&gt;ES6 第二节 新的声明方式&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;第二节-新的声明方式&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="http://tomotoes.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6 第一节 ES6的开发环境搭建</title>
    <link href="http://tomotoes.com/posts/52480212/"/>
    <id>http://tomotoes.com/posts/52480212/</id>
    <published>2020-03-19T08:11:48.000Z</published>
    <updated>2020-03-20T11:17:20.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6-第一节-ES6的开发环境搭建"><a href="#ES6-第一节-ES6的开发环境搭建" class="headerlink" title="ES6 第一节 ES6的开发环境搭建"></a>ES6 第一节 ES6的开发环境搭建</h1><hr><h2 id="第一节-ES6的开发环境搭建"><a href="#第一节-ES6的开发环境搭建" class="headerlink" title="第一节 ES6的开发环境搭建"></a>第一节 ES6的开发环境搭建</h2><p>现在的Chrome浏览器已经支持ES6了，但是有些低版本的浏览器还是不支持ES6的语法，这就需要我们把ES6的语法自动的转变成ES5的语法。Webpack是有自动编译转换能力的，除了Webpack自动编译，我们还可以用Babel来完成。我们就使用Babel把ES6编译成ES5。</p><h3 id="1、建立工程目录"><a href="#1、建立工程目录" class="headerlink" title="1、建立工程目录"></a>1、建立工程目录</h3><p>先建立一个项目的工程目录，并在目录下边建立两个文件夹：<strong>src</strong>和<strong>dist</strong></p><p><font color="red"><strong>src：</strong></font>书写<strong>ES6代码</strong>的文件夹，写的js程序都放在这里。<br><font color="red"><strong>dist：</strong></font>利用Babel编译成的<strong>ES5代码</strong>的文件夹，在HTML页面需要引入的时这里的js文件。</p><h3 id="2、编写index-html"><a href="#2、编写index-html" class="headerlink" title="2、编写index.html"></a>2、编写index.html</h3><p>文件夹建立好后，我们新建一个index.html文件:（这里html快速生成选择<strong>html5</strong>）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Hello ECMA Script 6&lt;/title&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;script src="./src/index.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    Hello ECMA Script 6</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是在引入js文件时，引入的是<strong>dist目录</strong>下的文件:</p><figure class="highlight plain"><figcaption><span>src</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 3、编写index.js</span><br><span class="line"></span><br><span class="line">在src目录下，新建index.js文件。这个文件很简单，我们只作一个a变量的声明，并用console.log()打印出来。</span><br></pre></td></tr></tbody></table></figure><p>let a=1;   //这是ES6的一种声明方式<br>console.log(a);</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">接下来我们需要把这个ES6的语法文件自动编程成ES5的语法文件：</span><br><span class="line"></span><br><span class="line">### 4、初始化项目</span><br><span class="line"></span><br><span class="line">在安装**Babel**之前，需要用```cnpm init```先初始化我们的项目。打开终端或者通过cmd打开命令行工具，进入项目目录，输入下边的命令：</span><br><span class="line"></span><br><span class="line">&gt; cnpm init -y</span><br><span class="line"></span><br><span class="line">-y代表全部默认同意，就不用一次次按回车设置信息。命令执行完成后，会在项目根目录下生产**package.json**文件：</span><br></pre></td></tr></tbody></table></figure><p>{<br>  “name”: “es6”,<br>  “version”: “1.0.0”,<br>  “description”: “”,<br>  “main”: “index.js”,<br>  “scripts”: {<br>    “test”: “echo "Error: no test specified" &amp;&amp; exit 1”<br>  },<br>  “keywords”: [],<br>  “author”: “”,<br>  “license”: “ISC”<br>}</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以根据自己的需要进行修改，比如我们修改name的值。</span><br><span class="line"></span><br><span class="line">### 5、全局安装Babel-cli</span><br><span class="line">在终端中输入以下命令：</span><br></pre></td></tr></tbody></table></figure><p>cnpm install -g babel-cli</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虽然已经安装了babel-cli，只是这样还不能成功进行转换，如果你不相信可以输入下边的命令试一下：</span><br></pre></td></tr></tbody></table></figure><p>babel src/index.js -o dist/index.js</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">你会发现，在dist目录下确实生产了index.js文件，但是文件并没有变化，还是使用的ES6的语法。因为我们还需要安装转换包才能成功转换。</span><br><span class="line"></span><br><span class="line">### 6、本地安装babel-preset-es2015 和 babel-cli</span><br></pre></td></tr></tbody></table></figure><p>cnpm install –save-dev babel-preset-es2015 babel-cli</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装完成后，我们可以看一下我们的package.json文件，已经多了devDependencies选项。</span><br><span class="line"></span><br><span class="line">### 7、新建.babelrc文件</span><br><span class="line">在根目录下新建.babelrc文件，并打开录入下面的代码：</span><br></pre></td></tr></tbody></table></figure><p>{<br>    “presets”:[<br>        “es2015”<br>    ],<br>    “plugins”:[]<br>}</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这个文件我们建立完成后，现在可以在终端输入的转换命令了，这次ES6成功转化为ES5的语法。</span><br></pre></td></tr></tbody></table></figure><p>babel src/index.js -o dist/index.js</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 8、简化转化命令</span><br><span class="line">在学习vue 的时候，可以使用```cnpm run build```直接利用webpack进行打包，在这里也希望利用这种方式完成转换。打开package.json文件，把文件中的build修改成下面的样子。</span><br></pre></td></tr></tbody></table></figure><p>{<br>  “name”: “es6”,<br>  “version”: “1.0.0”,<br>  “description”: “”,<br>  “main”: “index.js”,<br>  “scripts”: {<br>    “build”: “babel src/index.js -o dist/index.js”<br>  },<br>  “keywords”: [],<br>  “author”: “”,<br>  “license”: “ISC”,<br>  “devDependencies”: {<br>    “babel-cli”: “^6.24.1”,<br>    “babel-preset-es2015”: “^6.24.1”<br>  }<br>}</p><pre><code>修改好后，以后我们就可以使用 ```cnpm run build```来进行转换了。</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6-第一节-ES6的开发环境搭建&quot;&gt;&lt;a href=&quot;#ES6-第一节-ES6的开发环境搭建&quot; class=&quot;headerlink&quot; title=&quot;ES6 第一节 ES6的开发环境搭建&quot;&gt;&lt;/a&gt;ES6 第一节 ES6的开发环境搭建&lt;/h1&gt;&lt;hr&gt;
&lt;h2 
      
    
    </summary>
    
    
    
      <category term="ES6" scheme="http://tomotoes.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第三季】第6节 Extends Option 扩展选项</title>
    <link href="http://tomotoes.com/posts/5cd62826/"/>
    <id>http://tomotoes.com/posts/5cd62826/</id>
    <published>2020-03-16T11:20:14.000Z</published>
    <updated>2020-03-20T11:15:43.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第三季】第6节-Extends-Option-扩展选项"><a href="#Vue2-0-【第三季】第6节-Extends-Option-扩展选项" class="headerlink" title="Vue2.0 【第三季】第6节 Extends Option 扩展选项"></a>Vue2.0 【第三季】第6节 Extends Option 扩展选项</h1><hr><h2 id="第6节-Extends-Option-扩展选项"><a href="#第6节-Extends-Option-扩展选项" class="headerlink" title="第6节 Extends Option 扩展选项"></a>第6节 Extends Option 扩展选项</h2><p>通过外部增加对象的形式，对构造器进行扩展。它和第5节讲的混入非常的类似。</p><h3 id="一、extends我们来看一个扩展的实例："><a href="#一、extends我们来看一个扩展的实例：" class="headerlink" title="一、extends我们来看一个扩展的实例："></a>一、extends我们来看一个扩展的实例：</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;extends&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;extends&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">           {% raw %}</span><br><span class="line">   {{num}}</span><br><span class="line">   {% endraw %}</span><br><span class="line">            &lt;p&gt;&lt;button @click="add"&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var extendsObj={</span><br><span class="line">                updated:function(){</span><br><span class="line">                    console.log("我是扩展的updated");</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    add:function(){</span><br><span class="line">                        console.log('我是扩展出来的方法');</span><br><span class="line">                        this.num++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        </span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    num:1</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    add:function(){</span><br><span class="line">                        console.log('我是原生的方法');</span><br><span class="line">                        this.num++;</span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">                updated:function(){</span><br><span class="line">                    console.log('我是原生的update');</span><br><span class="line">                },</span><br><span class="line">                extends:extendsObj</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./5.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="二、delimiters-选项"><a href="#二、delimiters-选项" class="headerlink" title="二、delimiters 选项"></a>二、delimiters 选项</h3><p>因为这节课内容比较少，所以我们把要讲的最后一个选项一起讲了。delimiters的作用是改变我们插值的符号。<br>Vue默认的插值是双大括号。但有时我们会有需求更改这个插值的形式。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;extends&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;extends&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            ${ num }</span><br><span class="line">            &lt;p&gt;&lt;button @click="add"&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var extendsObj={</span><br><span class="line">                updated:function(){</span><br><span class="line">                    console.log("我是扩展的updated");</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    add:function(){</span><br><span class="line">                        console.log('我是扩展出来的方法');</span><br><span class="line">                        this.num++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        </span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    num:1</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    add:function(){</span><br><span class="line">                        console.log('我是原生的方法');</span><br><span class="line">                        this.num++;</span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">                updated:function(){</span><br><span class="line">                    console.log('我是原生的update');</span><br><span class="line">                },</span><br><span class="line">                extends:extendsObj,</span><br><span class="line">                delimiters:['${','}']</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>现在我们的插值形式就变成了${}。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第三季】第6节-Extends-Option-扩展选项&quot;&gt;&lt;a href=&quot;#Vue2-0-【第三季】第6节-Extends-Option-扩展选项&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第三季】第6节 Extend
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第三季】第5节 Mixins 混入选项操作</title>
    <link href="http://tomotoes.com/posts/5479d7da/"/>
    <id>http://tomotoes.com/posts/5479d7da/</id>
    <published>2020-03-16T11:19:37.000Z</published>
    <updated>2020-03-20T11:15:50.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第三季】第5节-Mixins-混入选项操作"><a href="#Vue2-0-【第三季】第5节-Mixins-混入选项操作" class="headerlink" title="Vue2.0 【第三季】第5节 Mixins 混入选项操作"></a>Vue2.0 【第三季】第5节 Mixins 混入选项操作</h1><hr><h2 id="第5节-Mixins-混入选项操作"><a href="#第5节-Mixins-混入选项操作" class="headerlink" title="第5节 Mixins 混入选项操作"></a>第5节 Mixins 混入选项操作</h2><p>Mixins一般有两种用途：</p><ul><li>在你已经写好了构造器后，需要增加方法或者临时的活动时使用的方法，这时用混入会减少源代码的污染。</li><li>很多地方都会用到的公用方法，用混入的方法可以减少代码量，实现代码重用。</li></ul><h3 id="一、Mixins的基本用法"><a href="#一、Mixins的基本用法" class="headerlink" title="一、Mixins的基本用法"></a>一、Mixins的基本用法</h3><p>我们现在有个数字点击递增的程序，假设已经完成了，这时我们希望每次数据变化时都能够在控制台打印出提示：“数据发生变化”。</p><p>代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;Mixins Option Demo&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Mixins Option Demo&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        &lt;p&gt;num:{{ num }}&lt;/p&gt;</span><br><span class="line">        &lt;P&gt;&lt;button @click="add"&gt;增加数量&lt;/button&gt;&lt;/P&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        //额外临时加入时，用于显示日志</span><br><span class="line">        var addLog={</span><br><span class="line">            updated:function(){</span><br><span class="line">                console.log("数据发生变化,变化成"+this.num+".");</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:{</span><br><span class="line">                num:1</span><br><span class="line">            },</span><br><span class="line">            methods:{</span><br><span class="line">                add:function(){</span><br><span class="line">                    this.num++;</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            mixins:[addLog]//混入</span><br><span class="line">        })</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p><strong>mixins的调用顺序：</strong><br>从执行的先后顺序来说，都是混入的先执行，然后构造器里的再执行，需要注意的是，这并不是方法的覆盖，而是被执行了两边。</p><p>在上边的代码的构造器里我们也加入了updated的钩子函数：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updated:function(){</span><br><span class="line">      console.log("构造器里的updated方法。")</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>这时控制台输出的顺序是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mixins数据放生变化,变化成2.</span><br><span class="line">构造器里的updated方法。</span><br></pre></td></tr></tbody></table></figure><p>PS：当混入方法和构造器的方法重名时，混入的方法无法展现，也就是不起作用。</p><h3 id="三、全局API混入方式"><a href="#三、全局API混入方式" class="headerlink" title="三、全局API混入方式"></a>三、全局API混入方式</h3><p>我们也可以定义全局的混入，这样在需要这段代码的地方直接引入js，就可以拥有这个功能了。我们来看一下全局混入的方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin({</span><br><span class="line">    updated:function(){</span><br><span class="line">        console.log('我是全局被混入的');</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>PS：全局混入的执行顺序要前于混入和构造器里的方法。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第三季】第5节-Mixins-混入选项操作&quot;&gt;&lt;a href=&quot;#Vue2-0-【第三季】第5节-Mixins-混入选项操作&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第三季】第5节 Mixins 混入选项操作&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第三季】第4节 Watch选项 监控数据</title>
    <link href="http://tomotoes.com/posts/2d04e911/"/>
    <id>http://tomotoes.com/posts/2d04e911/</id>
    <published>2020-03-16T11:19:03.000Z</published>
    <updated>2020-03-20T11:15:54.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第三季】第4节-Watch选项-监控数据"><a href="#Vue2-0-【第三季】第4节-Watch选项-监控数据" class="headerlink" title="Vue2.0 【第三季】第4节 Watch选项 监控数据"></a>Vue2.0 【第三季】第4节 Watch选项 监控数据</h1><hr><h2 id="第4节-Watch选项-监控数据"><a href="#第4节-Watch选项-监控数据" class="headerlink" title="第4节 Watch选项 监控数据"></a>第4节 Watch选项 监控数据</h2><p>数据变化的监控经常使用，我们可以先来看一个简单的数据变化监控的例子。例如天气预报的穿衣指数，它主要是根据温度来进行提示的，当然还有其它的，咱们就不考虑了。</p><h3 id="一、看一个监控变化的案例"><a href="#一、看一个监控变化的案例" class="headerlink" title="一、看一个监控变化的案例"></a>一、看一个监控变化的案例</h3><p>温度大于26度时，我们建议穿T恤短袖，温度小于26度大于0度时，我们建议穿夹克长裙，温度小于0度时我们建议穿棉衣羽绒服。</p><p>先来模拟一个温度变化的情况：我们使用按钮来加减温度。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;watch option&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;watch option&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;p&gt;今日温度：{{wendu}}度&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;穿衣建议：{{chuanyi}}&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&lt;button @click="shenggao"&gt;升高温度&lt;/button&gt;&lt;button @click="jiangdi"&gt;降低温度&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    wendu:14,</span><br><span class="line">                    chuanyi:'夹克长裙'</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    shenggao:function(){</span><br><span class="line">                        this.wendu+=5;</span><br><span class="line">                    },</span><br><span class="line">                    jiangdi:function(){</span><br><span class="line">                        this.wendu-=5;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./9.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="二、用实例属性写watch监控"><a href="#二、用实例属性写watch监控" class="headerlink" title="二、用实例属性写watch监控"></a>二、用实例属性写watch监控</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;watch option&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;watch option&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;p&gt;今日温度：{{wendu}}度&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;穿衣建议：{{chuanyi}}&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&lt;button @click="shenggao"&gt;升高温度&lt;/button&gt;&lt;button @click="jiangdi"&gt;降低温度&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    wendu:14,</span><br><span class="line">                    chuanyi:'夹克长裙'</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    shenggao:function(){</span><br><span class="line">                        this.wendu+=5;</span><br><span class="line">                    },</span><br><span class="line">                    jiangdi:function(){</span><br><span class="line">                        this.wendu-=5;</span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">                watch:{</span><br><span class="line">                    wendu:function(newVal,oldVal){</span><br><span class="line">                        if(newVal&gt;=26){</span><br><span class="line">                            this.chuanyi="T恤短袖";</span><br><span class="line">                        }else if(newVal&lt;26 &amp;&amp; newVal&gt;0){</span><br><span class="line">                            this.chuanyi="夹克长裙";</span><br><span class="line">                        }else{</span><br><span class="line">                            this.chuanyi="棉衣羽绒服";</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>但一般在js中不这么写，用一个数组把值存起来：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var chuanyiarray=['T恤短袖','夹克长裙','棉衣羽绒服'];</span><br><span class="line"></span><br><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">wendu:14,</span><br><span class="line">chuanyi:'夹克长裙'</span><br><span class="line">},</span><br><span class="line">methods:{</span><br><span class="line">shenggao:function(){</span><br><span class="line">this.wendu+=5;</span><br><span class="line">},</span><br><span class="line">jiangdi:function(){</span><br><span class="line">this.wendu-=5;</span><br><span class="line">}</span><br><span class="line">},</span><br><span class="line">watch:{</span><br><span class="line">wendu:function(newVal,oldVal){</span><br><span class="line">if(newVal&gt;=26){</span><br><span class="line">this.chuanyi=chuanyiarray[0];</span><br><span class="line">}else if(newVal&lt;26 &amp;&amp; newVal&gt;0){</span><br><span class="line">this.chuanyi=chuanyiarray[1];</span><br><span class="line">}else{</span><br><span class="line">this.chuanyi=chuanyiarray[2];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>有些时候我们会用<strong>实例属性</strong>的形式来写watch监控。也就是把我们watch卸载构造器的<strong>外部</strong>，这样的好处就是降低我们程序的耦合度，使程序变的灵活。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.$watch('xxx',function(){})</span><br></pre></td></tr></tbody></table></figure><p>还是上边的案例我们改成实例方法的模式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.$watch('temperature',function(newVal,oldVal){</span><br><span class="line">    if(newVal&gt;=26){</span><br><span class="line">        this.suggestion=suggestion[0];</span><br><span class="line">    }else if(newVal&lt;26 &amp;&amp; newVal &gt;=0)</span><br><span class="line">    {</span><br><span class="line">        this.suggestion=suggestion[1];</span><br><span class="line">    }else{</span><br><span class="line">        this.suggestion=suggestion[2];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;watch option&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;watch option&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;p&gt;今日温度：{{wendu}}度&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;穿衣建议：{{chuanyi}}&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&lt;button @click="shenggao"&gt;升高温度&lt;/button&gt;&lt;button @click="jiangdi"&gt;降低温度&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var chuanyiarray=['T恤短袖','夹克长裙','棉衣羽绒服'];</span><br><span class="line"></span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    wendu:14,</span><br><span class="line">                    chuanyi:'夹克长裙'</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    shenggao:function(){</span><br><span class="line">                        this.wendu+=5;</span><br><span class="line">                    },</span><br><span class="line">                    jiangdi:function(){</span><br><span class="line">                        this.wendu-=5;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            app.$watch('wendu',function(newVal,oldVal){</span><br><span class="line">                if(newVal&gt;=26){</span><br><span class="line">                    this.chuanyi=chuanyiarray[0];</span><br><span class="line">                }else if(newVal&lt;26 &amp;&amp; newVal&gt;0){</span><br><span class="line">                    this.chuanyi=chuanyiarray[1];</span><br><span class="line">                }else{</span><br><span class="line">                    this.chuanyi=chuanyiarray[2];</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>效果和上面是一样的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第三季】第4节-Watch选项-监控数据&quot;&gt;&lt;a href=&quot;#Vue2-0-【第三季】第4节-Watch选项-监控数据&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第三季】第4节 Watch选项 监控数据&quot;&gt;&lt;/a&gt;Vu
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第三季】第3节 Methods Option 方法选项</title>
    <link href="http://tomotoes.com/posts/eca300ee/"/>
    <id>http://tomotoes.com/posts/eca300ee/</id>
    <published>2020-03-16T11:18:25.000Z</published>
    <updated>2020-03-20T11:16:01.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第三季】第3节-Methods-Option-方法选项"><a href="#Vue2-0-【第三季】第3节-Methods-Option-方法选项" class="headerlink" title="Vue2.0 【第三季】第3节 Methods Option 方法选项"></a>Vue2.0 【第三季】第3节 Methods Option 方法选项</h1><hr><h2 id="第3节-Methods-Option-方法选项"><a href="#第3节-Methods-Option-方法选项" class="headerlink" title="第3节 Methods Option 方法选项"></a>第3节 Methods Option 方法选项</h2><p>在以前的学习中，已经大量的使用了构造器里的methods选项，但是并没有仔细和系统的讲解过，这节课把methods这个选项涉及的东西都讲一讲。</p><p>我们还是复习一下最简单的使用方法，一个数字，每点击一下按钮加1。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;methods Option&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;methods Option&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        {{ a }}</span><br><span class="line">        &lt;p&gt;&lt;button @click="add"&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:{</span><br><span class="line">                a:1</span><br><span class="line">            },</span><br><span class="line">            methods:{</span><br><span class="line">                add:function(){</span><br><span class="line">                    this.a++</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="一、methods中参数的传递"><a href="#一、methods中参数的传递" class="headerlink" title="一、methods中参数的传递"></a>一、methods中参数的传递</h3><p>使用方法和正常的javascript传递参数的方法一样，分为两步：</p><ul><li>在methods的方法中进行声明，比如我们给add方法加上一个num参数，就要写出<code>add:function(num){}</code></li><li>调用方法时直接传递，比如我们要传递2这个参数，我们在button上就直接可以写<code>&lt;button @click=”add(2)”&gt;&lt;/button&gt;</code></li></ul><p>现在知道了加参数的方法，看一段完整的代码，代码中给add添加了num参数，并在按钮上调用传递了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;methods Option&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;methods Option&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        {{ a }}</span><br><span class="line">        &lt;p&gt;&lt;button @click="add(5)"&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:{</span><br><span class="line">                a:1</span><br><span class="line">            },</span><br><span class="line">            methods:{</span><br><span class="line">                add:function(num){</span><br><span class="line">                    if(num!=''){</span><br><span class="line">                        this.a+=num;</span><br><span class="line">                    }else{</span><br><span class="line">                        this.a++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./5.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>这时，再点击按钮是每次加5个数字。</p><h3 id="二、methods中的-event参数"><a href="#二、methods中的-event参数" class="headerlink" title="二、methods中的$event参数"></a>二、methods中的$event参数</h3><p>传递的$event参数都是关于你点击鼠标的一些事件和属性。我们先看看传递的方法。</p><p>传递：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=”add(5,$event)”&gt;add&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure><p>我们这时候可以打印一下，看看event到底是个怎样的对象。你会发现，它包含了大部分鼠标事件的属性。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./6.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="三、native给组件绑定构造器里的原生事件"><a href="#三、native给组件绑定构造器里的原生事件" class="headerlink" title="三、native给组件绑定构造器里的原生事件"></a>三、native给组件绑定构造器里的原生事件</h3><p>在实际开发中经常需要把某个按钮封装成组件，然后反复使用，如何让组件调用构造器里的方法，而不是组件里的方法。就需要用到我们的.native修饰器了。</p><p>现在我们把我们的add按钮封装成组件：</p><p>声明btn对象：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var btn={</span><br><span class="line">    template:`&lt;button&gt;组件Add&lt;/button&gt;`     </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在构造器里声明：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components:{</span><br><span class="line">    "btn":btn</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>用.native修饰器来调用构造器里的add方法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&lt;btn @click.native="add(3)"&gt;&lt;/btn&gt;&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;methods Option&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;methods Option&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        {{ a }}</span><br><span class="line">        &lt;p&gt;&lt;button @click="add(5)"&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;&lt;btn @click.native="add(3)"&gt;&lt;/btn&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        var btn={</span><br><span class="line">            template:`&lt;button&gt;组件Add&lt;/button&gt;`     </span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:{</span><br><span class="line">                a:1</span><br><span class="line">            },</span><br><span class="line">            components:{</span><br><span class="line">                "btn":btn</span><br><span class="line">            },</span><br><span class="line">            methods:{</span><br><span class="line">                add:function(num){</span><br><span class="line">                    if(num!=''){</span><br><span class="line">                        this.a+=num;</span><br><span class="line">                    }else{</span><br><span class="line">                        this.a++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./7.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p><font color="red"><strong>这种方法很常用，必须掌握。</strong></font></p><h3 id="四、作用域外部调用构造器里的方法"><a href="#四、作用域外部调用构造器里的方法" class="headerlink" title="四、作用域外部调用构造器里的方法"></a>四、作用域外部调用构造器里的方法</h3><p>这种不经常使用，如果你出现了这种情况，说明你的代码组织不够好。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick="app.add(4)" &gt;外部调用构造器里的方法&lt;/button&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./8.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第三季】第3节-Methods-Option-方法选项&quot;&gt;&lt;a href=&quot;#Vue2-0-【第三季】第3节-Methods-Option-方法选项&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第三季】第3节 Method
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第三季】第2节 computed Option 计算选项</title>
    <link href="http://tomotoes.com/posts/7a60a0e2/"/>
    <id>http://tomotoes.com/posts/7a60a0e2/</id>
    <published>2020-03-16T11:17:45.000Z</published>
    <updated>2020-03-20T11:16:08.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第三季】第2节-computed-Option-计算选项"><a href="#Vue2-0-【第三季】第2节-computed-Option-计算选项" class="headerlink" title="Vue2.0 【第三季】第2节 computed Option 计算选项"></a>Vue2.0 【第三季】第2节 computed Option 计算选项</h1><hr><h2 id="第2节-computed-Option-计算选项"><a href="#第2节-computed-Option-计算选项" class="headerlink" title="第2节 computed Option 计算选项"></a>第2节 computed Option 计算选项</h2><p>computed 的作用主要是对原数据进行改造输出。改造输出：包括格式的编辑，大小写转换，顺序重排，添加符号……</p><h3 id="一、格式化输出结果"><a href="#一、格式化输出结果" class="headerlink" title="一、格式化输出结果"></a>一、格式化输出结果</h3><p>我们先来做个读出价格的例子：我们读书的原始数据是price:100 但是我们输出给用户的样子是（￥100元）。 </p><p>主要的javascript代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:{</span><br><span class="line">    newPrice:function(){</span><br><span class="line">        return this.price='￥' + this.price + '元';</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;Computed Option 计算选项&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Computed Option 计算选项&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        {{newPrice}}</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:{</span><br><span class="line">                price:100</span><br><span class="line">            },</span><br><span class="line">            computed:{</span><br><span class="line">                newPrice:function(){</span><br><span class="line">                    return this.price='￥' + this.price + '元';</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="二、用计算属性反转数组"><a href="#二、用计算属性反转数组" class="headerlink" title="二、用计算属性反转数组"></a>二、用计算属性反转数组</h3><p>例如：我们得到了一个新闻列表的数组，它的顺序是安装新闻时间的顺序正序排列的，也就是早反生的新闻排在前面。这是反人类的，我们需要给它反转。这时我们就可以用到我们的计算属性了。</p><p>没有排序的新闻列表，是安装日期正序排列的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var newsList=[</span><br><span class="line">    {title:'香港或就“装甲车被扣”事件追责 起诉涉事运输公司',date:'2017/3/10'},</span><br><span class="line">    {title:'日本第二大准航母服役 外媒：针对中国潜艇',date:'2017/3/12'},</span><br><span class="line">    {title:'中国北方将有明显雨雪降温天气 南方阴雨持续',date:'2017/3/13'},</span><br><span class="line">    {title:'起底“最短命副市长”：不到40天落马，全家被查',date:'2017/3/23'},</span><br><span class="line">];</span><br></pre></td></tr></tbody></table></figure><p>我们希望输出的结果：</p><ul><li>起底“最短命副市长”：不到40天落马，全家被查-2017/3/23</li><li>中国北方将有明显雨雪降温天气 南方阴雨持续-2017/3/13</li><li>日本第二大准航母服役 外媒：针对中国潜艇-2017/3/12</li><li>香港或就“装甲车被扣”事件追责 起诉涉事运输公司-2017/3/10 </li></ul><p>我们的在computed里的javascript代码：我们用js原生方法给数组作了反转。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:{</span><br><span class="line">    reverseNews:function(){</span><br><span class="line">        return this.newsList.reverse();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;computed&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;computed&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;p&gt;{{newPrice}}&lt;/p&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for="item in reversNews"&gt;{{item.title}}-{{item.date}}&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var newsList=[</span><br><span class="line">                {title:'香港或就“装甲车被扣”事件追责 起诉涉事运输公司',date:'2017/3/10'},</span><br><span class="line">                {title:'日本第二大准航母服役 外媒：针对中国潜艇',date:'2017/3/12'},</span><br><span class="line">                {title:'中国北方将有明显雨雪降温天气 南方阴雨持续',date:'2017/3/13'},</span><br><span class="line">                {title:'起底“最短命副市长”：不到40天落马，全家被查',date:'2017/3/23'},</span><br><span class="line">            ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    price:100,</span><br><span class="line">                    newsList:newsList</span><br><span class="line">                },</span><br><span class="line">                computed:{</span><br><span class="line">                    newPrice:function(){</span><br><span class="line">                        return this.price='￥' + this.price + '元';</span><br><span class="line">                    },</span><br><span class="line">                    reversNews:function(){</span><br><span class="line">                        return this.newsList.reverse();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p><strong>总结：computed 属性是非常有用，在输出数据前可以轻松的改变数据。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第三季】第2节-computed-Option-计算选项&quot;&gt;&lt;a href=&quot;#Vue2-0-【第三季】第2节-computed-Option-计算选项&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第三季】第2节 comp
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第三季】第1节 propsData Option 全局扩展的数据传递</title>
    <link href="http://tomotoes.com/posts/593dd63c/"/>
    <id>http://tomotoes.com/posts/593dd63c/</id>
    <published>2020-03-16T11:16:58.000Z</published>
    <updated>2020-03-20T11:16:12.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第三季】第1节-propsData-Option-全局扩展的数据传递"><a href="#Vue2-0-【第三季】第1节-propsData-Option-全局扩展的数据传递" class="headerlink" title="Vue2.0 【第三季】第1节 propsData Option 全局扩展的数据传递"></a>Vue2.0 【第三季】第1节 propsData Option 全局扩展的数据传递</h1><hr><h2 id="第1节-propsData-Option-全局扩展的数据传递"><a href="#第1节-propsData-Option-全局扩展的数据传递" class="headerlink" title="第1节 propsData Option 全局扩展的数据传递"></a>第1节 propsData Option 全局扩展的数据传递</h2><p>这一季讲的是基础中的选项，选项就是在Vue构造器里的配置功能的前缀（Vue已经给我们定义好了），Vue有很多选项，我们将在这一级教程中一一介绍。</p><p>propsData 不是和属性有关，他用在全局扩展时进行传递数据。先回顾一下全局扩展的知识，作一个<code>&lt;header&gt;&lt;/header&gt;</code>的扩展标签出来。实际我们并比推荐用全局扩展的方式作自定义标签，我们学了组件，完全可以使用组件来做，这里只是为了演示propsData的用法。</p><p>代码如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;PropsData Option Demo&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;PropsData Option Demo&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;header&gt;&lt;/header&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">       var  header_a = Vue.extend({</span><br><span class="line">           template:`&lt;p&gt;{{message}}&lt;/p&gt;`,</span><br><span class="line">           data:function(){</span><br><span class="line">               return {</span><br><span class="line">                   message:'Hello,I am Header'</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">       }); </span><br><span class="line">       new header_a().$mount('header');</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>扩展标签已经做好了，这时我们要在挂载时传递一个数字过去，我们就用到了propsData。 我们用propsData三步解决传值：</p><ul><li>1.在全局扩展里加入props进行接收。propsData:{a:1}</li><li>2.传递时用propsData进行传递。props:[‘a’] </li><li>3.用插值的形式写入模板。</li></ul><p>完整代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;propsData option&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;propsData option&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;header&gt;&lt;/header&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var header_a = Vue.extend({</span><br><span class="line">                template:'&lt;p&gt;{{message}}-{{a}}&lt;/p&gt;',</span><br><span class="line">                data:function(){</span><br><span class="line">                    return {</span><br><span class="line">                        message:'Hello , I am header!'</span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">                props:['a']</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            new header_a({propsData:{a:12}}).$mount('header');</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>总结：propsData在实际开发中我们使用的并不多，我们在后边会学到Vuex的应用，他的作用就是在单页应用中保持状态和数据的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第三季】第1节-propsData-Option-全局扩展的数据传递&quot;&gt;&lt;a href=&quot;#Vue2-0-【第三季】第1节-propsData-Option-全局扩展的数据传递&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第二季】第8节 Component 父子组件关系</title>
    <link href="http://tomotoes.com/posts/af610746/"/>
    <id>http://tomotoes.com/posts/af610746/</id>
    <published>2020-03-15T03:40:32.000Z</published>
    <updated>2020-03-20T11:16:33.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第二季】第8节-Component-父子组件关系"><a href="#Vue2-0-【第二季】第8节-Component-父子组件关系" class="headerlink" title="Vue2.0 【第二季】第8节 Component 父子组件关系"></a>Vue2.0 【第二季】第8节 Component 父子组件关系</h1><hr><h2 id="第8节-Component-父子组件关系"><a href="#第8节-Component-父子组件关系" class="headerlink" title="第8节 Component 父子组件关系"></a>第8节 Component 父子组件关系</h2><p>在实际开发中我们经常会遇到在一个自定义组件中要使用其他自定义组件，这就需要一个父子组件关系。</p><h3 id="一、构造器外部写局部注册组件"><a href="#一、构造器外部写局部注册组件" class="headerlink" title="一、构造器外部写局部注册组件"></a>一、构造器外部写局部注册组件</h3><p>上节课我们都把<strong>局部</strong>组件的编写放到了构造器<strong>内</strong>部，如果组件代码量很大，会<strong>影响构造器的可读性，造成拖拉和错误</strong>。</p><p>我们把组件编写的代码放到构造器<strong>外部</strong>或者说<strong>单独文件</strong>。</p><p>我们需要先声明一个<font color="red">对象</font>,对象里就是<font color="red">组件的内容</font>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var monkeyComponent = {</span><br><span class="line">template:`&lt;div style="color:red;"&gt;Monkey is from China!&lt;/div&gt;`</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>声明好对象后在构造器里引用就可以了：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">components:{</span><br><span class="line">"monkey":monkeyComponent</span><br><span class="line">}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>html中引用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">&lt;monkey&gt;&lt;/monkey&gt;   //引用</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./5.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="二、父子组件的嵌套"><a href="#二、父子组件的嵌套" class="headerlink" title="二、父子组件的嵌套"></a>二、父子组件的嵌套</h3><p>我们先声明一个父组件，比如叫monkey，然后里边我们加入一个city组件，我们来看这样的代码如何写。</p><p>html文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;component-3&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;component-3&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;monkey&gt;&lt;/monkey&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var city = {</span><br><span class="line">                template:`&lt;div style="color:green;"&gt;siChuan of China.&lt;/div&gt;`</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            var monkeyComponent = {</span><br><span class="line">                template:`</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;p&gt;Monkey is from China!&lt;/p&gt;</span><br><span class="line">                    &lt;city&gt;&lt;/city&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                `,</span><br><span class="line">                components:{</span><br><span class="line">                    "city":city</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                components:{</span><br><span class="line">                    "monkey":monkeyComponent</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./6.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第二季】第8节-Component-父子组件关系&quot;&gt;&lt;a href=&quot;#Vue2-0-【第二季】第8节-Component-父子组件关系&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第二季】第8节 Component 父子
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第二季】第7节 Component 组件 props 属性设置</title>
    <link href="http://tomotoes.com/posts/9e36f38d/"/>
    <id>http://tomotoes.com/posts/9e36f38d/</id>
    <published>2020-03-15T03:39:55.000Z</published>
    <updated>2020-03-20T11:16:35.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第二季】第7节-Component-组件-props-属性设置"><a href="#Vue2-0-【第二季】第7节-Component-组件-props-属性设置" class="headerlink" title="Vue2.0 【第二季】第7节 Component 组件 props 属性设置"></a>Vue2.0 【第二季】第7节 Component 组件 props 属性设置</h1><hr><h2 id="第7节-Component-组件-props-属性设置"><a href="#第7节-Component-组件-props-属性设置" class="headerlink" title="第7节 Component 组件 props 属性设置"></a>第7节 Component 组件 props 属性设置</h2><p>props选项就是<strong>设置和获取标签上的属性值</strong>的，例如我们有一个自定义的组件,这时我们想给他加个标签属性写成 意思就是熊猫来自中国，当然这里的China可以换成任何值。<strong>定义属性的选项是props</strong>。</p><h3 id="一、定义属性并获取属性值"><a href="#一、定义属性并获取属性值" class="headerlink" title="一、定义属性并获取属性值"></a>一、定义属性并获取属性值</h3><p>定义属性我们需要用props选项，加上<font color="red">数组</font>形式的属性名称，例如：props:[‘here’]。在组件的模板里读出<strong>属性值</strong>只需要用<strong>插值</strong>的形式，例如</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;component-2&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;component-2&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;monkey here="China"&gt;&lt;/monkey&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                components:{   //可以定义多个</span><br><span class="line">                    "monkey":{  //这块必须是字符串，不然相当于没定义</span><br><span class="line">                        template:'&lt;div style="color:green"&gt;Monkey is from {{here}}.&lt;/div&gt;',</span><br><span class="line">                        props:['here']</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>上面的代码定义了monkey的组件，并用props设置了here的属性值，在here属性值里传递了China给组件。 最后输出的结果是绿色字体的Monkey is from China.</p><h3 id="二、属性中带’-‘的处理方式"><a href="#二、属性中带’-‘的处理方式" class="headerlink" title="二、属性中带’ - ‘的处理方式"></a>二、属性中带’ - ‘的处理方式</h3><p>我们在写属性时经常会加入’-‘来进行分词，比如：<code>&lt;monkey from-here="China"&gt;&lt;/monkey&gt;</code>，那这时我们在props里如果写成props:[‘form-here’]是错误的，我们必须用小驼峰式写法props:[‘formHere’]。（大驼峰：FromHere）</p><p>html文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;monkey from-here="China"&gt;&lt;/monkey&gt;</span><br></pre></td></tr></tbody></table></figure><p>js文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">components:{   //可以定义多个</span><br><span class="line">"monkey":{  //这块必须是字符串，不然相当于没定义</span><br><span class="line">template:'&lt;div style="color:green"&gt;Monkey is from {{fromHere}}.&lt;/div&gt;',</span><br><span class="line">props:['fromHere']</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><font color="red">PS：因为这里有坑，所以还是少用-为好。</font></p><h3 id="三、在构造器里向组件中传值"><a href="#三、在构造器里向组件中传值" class="headerlink" title="三、在构造器里向组件中传值"></a>三、在构造器里向组件中传值</h3><p>把构造器中data的值传递给组件，我们只要进行绑定就可以了。就是我们第一季学的v-bind:xxx</p><p>html文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;monkey v-bind:here="message"&gt;&lt;/monkey&gt;或者简写：&lt;monkey :here="message"&gt;&lt;/monkey&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">message:'China'</span><br><span class="line">},</span><br><span class="line">components:{   //可以定义多个</span><br><span class="line">"monkey":{  //这块必须是字符串，不然相当于没定义</span><br><span class="line">template:'&lt;div style="color:green"&gt;Monkey is from {{here}}.&lt;/div&gt;',</span><br><span class="line">props:['here']</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>同样可以实现以上效果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第二季】第7节-Component-组件-props-属性设置&quot;&gt;&lt;a href=&quot;#Vue2-0-【第二季】第7节-Component-组件-props-属性设置&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第二季】第7
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第二季】第6节 Component 初识组件</title>
    <link href="http://tomotoes.com/posts/f35f578e/"/>
    <id>http://tomotoes.com/posts/f35f578e/</id>
    <published>2020-03-15T03:39:11.000Z</published>
    <updated>2020-03-20T11:16:41.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第二季】第6节-Component-初识组件"><a href="#Vue2-0-【第二季】第6节-Component-初识组件" class="headerlink" title="Vue2.0 【第二季】第6节 Component 初识组件"></a>Vue2.0 【第二季】第6节 Component 初识组件</h1><hr><h2 id="第6节-Component-初识组件"><a href="#第6节-Component-初识组件" class="headerlink" title="第6节 Component 初识组件"></a>第6节 Component 初识组件</h2><p><strong>前言</strong>（废话）：component组件是Vue学习的重点！所以你必须学好Vue component。其实组件就是制作自定义的标签，这些标签在HTML中是没有的。比如：<code>&lt;da0sy&gt;&lt;/da0sy&gt;</code>，那我们就开始学习这种技巧吧。</p><h3 id="一、全局化注册组件"><a href="#一、全局化注册组件" class="headerlink" title="一、全局化注册组件"></a>一、全局化注册组件</h3><p>全局化就是在构造器的外部用Vue.component来注册，我们注册一个da0sy组件来体验一下。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;component-1&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;component-1&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;da0sy&gt;&lt;/da0sy&gt;  //必须放在vue作用域里，这里是app</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            Vue.component('da0sy',{   ////只能定义一个</span><br><span class="line">                template:'&lt;div style="color:red"&gt;我是全局的da0sy组件&lt;/div&gt;'</span><br><span class="line">            })</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>我们在javascript里注册了一个组件，在HTML中调用了它。这就是最简单的一个组件的编写方法，并且它可以放到<strong>多个构造器的作用域</strong>里。</p><h3 id="二、局部注册组件局部"><a href="#二、局部注册组件局部" class="headerlink" title="二、局部注册组件局部"></a>二、局部注册组件局部</h3><p>局部注册组件和全局注册组件是相对应的，局部注册的组件只能在组件注册的作用域里进行使用，其他作用域使用无效。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;component-1&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;component-1&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">      &lt;monkey&gt;&lt;/monkey&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            components:{   //可以定义多个</span><br><span class="line">                "monkey":{   //这块必须是字符串，不然相当于没定义</span><br><span class="line">                    template:`&lt;div style="color:green;"&gt;局部注册的monkey标签&lt;/div&gt;`</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>从代码中你可以看出局部注册其实就是写在<strong>构造器里</strong>，但是你需要注意的是，,<font color="red">构造器里的components 是加s的，而全局注册是不加s的。</font></p><h3 id="三、组件和指令的区别"><a href="#三、组件和指令的区别" class="headerlink" title="三、组件和指令的区别"></a>三、组件和指令的区别</h3><p><font color="red">组件</font>注册的是一个<font color="red">标签</font>，而<font color="red">指令</font>注册的是已有标签里的一个<font color="red">属性</font>。在实际开发中我们还是用组件比较多，指令用的比较少。因为指令看起来封装的没那么好，这只是个人观点。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第二季】第6节-Component-初识组件&quot;&gt;&lt;a href=&quot;#Vue2-0-【第二季】第6节-Component-初识组件&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第二季】第6节 Component 初识组件&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第二季】第5节 Template制作模板</title>
    <link href="http://tomotoes.com/posts/56d26f90/"/>
    <id>http://tomotoes.com/posts/56d26f90/</id>
    <published>2020-03-14T06:35:54.000Z</published>
    <updated>2020-03-20T11:16:46.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第二季】第5节-Template制作模板"><a href="#Vue2-0-【第二季】第5节-Template制作模板" class="headerlink" title="Vue2.0 【第二季】第5节 Template制作模板"></a>Vue2.0 【第二季】第5节 Template制作模板</h1><hr><h2 id="第5节-Template制作模板"><a href="#第5节-Template制作模板" class="headerlink" title="第5节 Template制作模板"></a>第5节 Template制作模板</h2><h3 id="一、直接写在选项里的模板"><a href="#一、直接写在选项里的模板" class="headerlink" title="一、直接写在选项里的模板"></a>一、直接写在选项里的模板</h3><p>直接在构造器里的template选项后边编写。这种写法比较直观，但是如果模板html代码太多，不建议使用。</p><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var app=new Vue({</span><br><span class="line">     el:'#app',</span><br><span class="line">     data:{</span><br><span class="line">         message:'hello Vue!'</span><br><span class="line">      },</span><br><span class="line">     template:`</span><br><span class="line">        &lt;h1 style="color:red"&gt;我是选项模板&lt;/h1&gt;</span><br><span class="line">     `   //这是Tab上的键</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="二、写在template标签里的模板"><a href="#二、写在template标签里的模板" class="headerlink" title="二、写在template标签里的模板"></a>二、写在template标签里的模板</h3><p>这种写法更像是在写HTML代码，就算不会写Vue的人，也可以制作页面。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id="demo2"&gt;</span><br><span class="line">&lt;h2 style="color:red"&gt;我是template标签模板&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">var app=new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">        data:{</span><br><span class="line">message:'hello Vue!'</span><br><span class="line">        },</span><br><span class="line">        template:'#demo2'</span><br><span class="line">    })</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="三、写在script标签里的模板"><a href="#三、写在script标签里的模板" class="headerlink" title="三、写在script标签里的模板"></a>三、写在script标签里的模板</h3><p>这种写模板的方法，可以让模板文件从外部引入。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="x-template" id="demo3" &lt;!--src="..."--&gt;&gt;</span><br><span class="line">        &lt;h2 style="color:red"&gt;我是script标签模板&lt;/h2&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:{</span><br><span class="line">                message:'hello Vue!'</span><br><span class="line">            },</span><br><span class="line">            template:'#demo3'</span><br><span class="line">        })</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>这一节学习了Template的三种写法，以后学习到vue-cli的时候还会学到一种xxx.vue的写法。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第二季】第5节-Template制作模板&quot;&gt;&lt;a href=&quot;#Vue2-0-【第二季】第5节-Template制作模板&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第二季】第5节 Template制作模板&quot;&gt;&lt;/a&gt;Vu
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第二季】第4节 Vue的生命周期（钩子函数）</title>
    <link href="http://tomotoes.com/posts/84c2c618/"/>
    <id>http://tomotoes.com/posts/84c2c618/</id>
    <published>2020-03-14T06:35:09.000Z</published>
    <updated>2020-03-20T11:16:50.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第二季】第4节-Vue的生命周期（钩子函数）"><a href="#Vue2-0-【第二季】第4节-Vue的生命周期（钩子函数）" class="headerlink" title="Vue2.0 【第二季】第4节 Vue的生命周期（钩子函数）"></a>Vue2.0 【第二季】第4节 Vue的生命周期（钩子函数）</h1><hr><h2 id="第4节-Vue的生命周期（钩子函数）"><a href="#第4节-Vue的生命周期（钩子函数）" class="headerlink" title="第4节 Vue的生命周期（钩子函数）"></a>第4节 Vue的生命周期（钩子函数）</h2><p>Vue一共有10个生命周期函数，我们可以利用这些函数在vue的每个阶段都进行操作数据或者改变内容。</p><p>其实在Vue的官网有一张图已经很好的诠释了生命周期，直接贴图，然后上程序代码。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>直接来看一段代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;生命周期&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;生命周期&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            {{count}}</span><br><span class="line">            &lt;p&gt;&lt;button @click="add"&gt;add&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;button onclick="app.$destroy()"&gt;销毁&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    count:1</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    add:function(){</span><br><span class="line">                        this.count++;</span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">                beforeCreate:function(){</span><br><span class="line">                    console.log('1-beforeCreate 初始化之前');</span><br><span class="line">                },</span><br><span class="line">                created:function(){</span><br><span class="line">                    console.log('2-created 创建完成');</span><br><span class="line">                },</span><br><span class="line">                beforeMount:function(){</span><br><span class="line">                    console.log('3-beforeMount 挂载之前');</span><br><span class="line">                },</span><br><span class="line">                mounted:function(){</span><br><span class="line">                    console.log('4-mounted 被挂载之后');</span><br><span class="line">                },</span><br><span class="line">                beforeUpdate:function(){</span><br><span class="line">                    console.log('5-beforeUpdate 数据更新前');</span><br><span class="line">                },</span><br><span class="line">                updated:function(){</span><br><span class="line">                    console.log('6-updated 被更新后');</span><br><span class="line">                },</span><br><span class="line">                activated:function(){</span><br><span class="line">                    console.log('7-activated');</span><br><span class="line">                },</span><br><span class="line">                deactivated:function(){</span><br><span class="line">                    console.log('8-deactivated');</span><br><span class="line">                },</span><br><span class="line">                beforeDestroy:function(){</span><br><span class="line">                    console.log('9-beforeDestroy 销毁之前');</span><br><span class="line">                },</span><br><span class="line">                destroyed:function(){</span><br><span class="line">                    console.log('10-destroyed 销毁之后')</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>同样的，试验一下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>点击add按钮后：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>点击销毁后：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第二季】第4节-Vue的生命周期（钩子函数）&quot;&gt;&lt;a href=&quot;#Vue2-0-【第二季】第4节-Vue的生命周期（钩子函数）&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第二季】第4节 Vue的生命周期（钩子函数）&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第二季】第3节 Vue.set全局操作</title>
    <link href="http://tomotoes.com/posts/37fb3230/"/>
    <id>http://tomotoes.com/posts/37fb3230/</id>
    <published>2020-03-14T06:34:26.000Z</published>
    <updated>2020-03-20T11:16:56.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第二季】第3节-Vue-set全局操作"><a href="#Vue2-0-【第二季】第3节-Vue-set全局操作" class="headerlink" title="Vue2.0 【第二季】第3节 Vue.set全局操作"></a>Vue2.0 【第二季】第3节 Vue.set全局操作</h1><hr><h2 id="第3节：Vue-set全局操作"><a href="#第3节：Vue-set全局操作" class="headerlink" title="第3节：Vue.set全局操作"></a>第3节：Vue.set全局操作</h2><p>Vue.set 的作用就是在构造器外部操作构造器内部的数据、属性或者方法。比如在vue构造器内部定义了一个count为1的数据，我们在构造器外部定义了一个方法，要每次点击按钮给值加1.就需要用到Vue.set。</p><h3 id="一、引用构造器外部数据"><a href="#一、引用构造器外部数据" class="headerlink" title="一、引用构造器外部数据"></a>一、引用构造器外部数据</h3><p>什么是外部数据，就是不在Vue构造器里的data处声明，而是在构造器外部声明，然后在data处引用。外部数据的加入让程序更加灵活，我们可以在外部获取任何想要的数据形式，然后让data引用。 看一个简单的代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//在构造器外部声明数据</span><br><span class="line">var outData={</span><br><span class="line">    count:1,</span><br><span class="line">    goodName:'car'</span><br><span class="line">};</span><br><span class="line">var app=new Vue({</span><br><span class="line">    el:'#app',</span><br><span class="line">    //引用外部数据</span><br><span class="line">    data:outData</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">{{count}}</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器依然输出1</p><h3 id="二、在外部改变数据的三种方法："><a href="#二、在外部改变数据的三种方法：" class="headerlink" title="二、在外部改变数据的三种方法："></a>二、在外部改变数据的三种方法：</h3><h4 id="1、用Vue-set改变"><a href="#1、用Vue-set改变" class="headerlink" title="1、用Vue.set改变"></a>1、用Vue.set改变</h4><p>js中加入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function add(){</span><br><span class="line">       Vue.set(outData,'count',4);</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>html改为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">{{count}}</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;p&gt;&lt;button onclick="add()"&gt;add&lt;/button&gt;&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>点击按钮数字就会变成4：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./8.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h4 id="2、用Vue对象的方法添加"><a href="#2、用Vue对象的方法添加" class="headerlink" title="2、用Vue对象的方法添加"></a>2、用Vue对象的方法添加</h4><p>js中加入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function add(){</span><br><span class="line">app.count++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>浏览器实现按钮逐次加一</p><h4 id="3、直接操作外部数据"><a href="#3、直接操作外部数据" class="headerlink" title="3、直接操作外部数据"></a>3、直接操作外部数据</h4><p>js中加入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function add(){</span><br><span class="line">outData.count++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>同样实现按钮逐次加一的效果</p><p>其实这三种方式都可以操作外部的数据，Vue也给我们增加了一种操作外部数据的方法。</p><h3 id="三、为什么要有Vue-set的存在？"><a href="#三、为什么要有Vue-set的存在？" class="headerlink" title="三、为什么要有Vue.set的存在？"></a>三、为什么要有Vue.set的存在？</h3><p>由于Javascript的限制，Vue不能自动检测以下变动的数组。</p><ul><li>当你利用索引直接设置一个项时，vue不会为我们自动更新。</li><li>当你修改数组的长度时，vue不会为我们自动更新。</li></ul><p>看一段代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;Vue.set 全局操作&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Vue.set 全局操作&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=" aa in arr"&gt;{{aa}}&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button onclick="add()"&gt;外部添加&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line"></span><br><span class="line">        function add(){</span><br><span class="line">            console.log("我已经执行了");</span><br><span class="line">           app.arr[1]='ddd';</span><br><span class="line">           //Vue.set(app.arr,1,'ddd');</span><br><span class="line">        }</span><br><span class="line">        var outData={</span><br><span class="line">            arr:['aaa','bbb','ccc']</span><br><span class="line">        };</span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:outData</span><br><span class="line">        })</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>这时我们的界面是不会自动更新数组的，我们需要用Vue.set(app.arr,1,’ddd’)来设置改变，vue才会给我们自动更新，这就是Vue.set存在的意义。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第二季】第3节-Vue-set全局操作&quot;&gt;&lt;a href=&quot;#Vue2-0-【第二季】第3节-Vue-set全局操作&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第二季】第3节 Vue.set全局操作&quot;&gt;&lt;/a&gt;Vue2.
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vye2.0 【第二季】第2节 vue.extend构造器的延伸</title>
    <link href="http://tomotoes.com/posts/f7bf78f1/"/>
    <id>http://tomotoes.com/posts/f7bf78f1/</id>
    <published>2020-03-14T06:33:47.000Z</published>
    <updated>2020-03-20T11:16:59.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第二季】第2节-Vue-extend构造器的延伸"><a href="#Vue2-0-【第二季】第2节-Vue-extend构造器的延伸" class="headerlink" title="Vue2.0 【第二季】第2节  Vue.extend构造器的延伸"></a>Vue2.0 【第二季】第2节  Vue.extend构造器的延伸</h1><hr><h2 id="一、什么是Vue-extend"><a href="#一、什么是Vue-extend" class="headerlink" title="一、什么是Vue.extend"></a>一、什么是Vue.extend</h2><p>Vue.extend 返回的是一个<strong>“扩展实例构造器”</strong>,也就是预设了部分选项的Vue实例构造器。经常服务于<strong>Vue.component</strong>用来生成组件，可以简单理解为当在模板中遇到该组件名称作为标签的自定义元素时，会自动调用“扩展实例构造器”来生产组件实例，并挂载到自定义元素上。</p><p>由于我们还没有学习Vue的自定义组件，所以我们先看跟组件无关的用途。</p><h2 id="二、自定义无参数标签"><a href="#二、自定义无参数标签" class="headerlink" title="二、自定义无参数标签"></a>二、自定义无参数标签</h2><p>我们想象一个需求，需求是这样的，要在博客页面多处显示作者的网名，并在网名上直接有链接地址。我们希望在html中只需要写<author></author>，这和自定义组件很像，但是他没有传递任何参数，只是个静态标签。</p><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;author&gt;&lt;/author&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：我们的Vue.extend该登场了，我们先用它来编写一个扩展实例构造器。代码如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var authorURL = Vue.extend({</span><br><span class="line">template:"&lt;p&gt;&lt;a :href='authorURL'&gt;{{authorName}}&lt;/a&gt;&lt;/p&gt;",</span><br><span class="line">data:function(){</span><br><span class="line">return{</span><br><span class="line">authorName:'da0sy',</span><br><span class="line">authorURL:"https://www.cnblogs.com/Elva3zora/"</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">//这时html中的标签还是不起作用的，因为扩展实例构造器是需要挂载的，我们再进行一次挂载。</span><br><span class="line">new authorURL().$mount("author");</span><br><span class="line"></span><br><span class="line">//这时我们在html写&lt;author&gt;&lt;/author&gt;就是管用的。</span><br></pre></td></tr></tbody></table></figure><p>我们看一下全部代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;vue.extend-扩展实例构造器&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;vue.extend-扩展实例构造器&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;author&gt;&lt;/author&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">       var authorExtend = Vue.extend({</span><br><span class="line">           template:"&lt;p&gt;&lt;a :href='authorUrl'&gt;{{authorName}}&lt;/a&gt;&lt;/p&gt;",</span><br><span class="line">           data:function(){</span><br><span class="line">               return{</span><br><span class="line">                   authorName:'JSPang',</span><br><span class="line">                   authorUrl:'http://www.jspang.com'</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">       });</span><br><span class="line">       new authorExtend().$mount('author');</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./6.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>点击链接链接到我们的地址：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./7.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h2 id="三、挂载到普通标签上"><a href="#三、挂载到普通标签上" class="headerlink" title="三、挂载到普通标签上"></a>三、挂载到普通标签上</h2><p>组件使用以上方式，但如果真的要使用扩展实例构造器，建议通过HTML标签上的id或者class来生成扩展实例构造器，Vue.extend里的代码是一样的，只是在挂载的时候，我们用类似jquery的选择器的方法，来进行挂载就可以了。</p><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="author"&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>相应的js代码改为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new authorURL().$mount("#author");</span><br></pre></td></tr></tbody></table></figure><hr><p><font color="red">PS：今天学到的快捷键：<strong>SHIFT+WINDOE键+下</strong>   可以快速小化窗口至任务栏</font></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第二季】第2节-Vue-extend构造器的延伸&quot;&gt;&lt;a href=&quot;#Vue2-0-【第二季】第2节-Vue-extend构造器的延伸&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第二季】第2节  Vue.extend构
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第二季】第1节 Vue.directive自定义指令</title>
    <link href="http://tomotoes.com/posts/6f4ade4f/"/>
    <id>http://tomotoes.com/posts/6f4ade4f/</id>
    <published>2020-03-14T06:33:00.000Z</published>
    <updated>2020-03-20T11:17:05.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第二季】第1节-Vue-directive自定义指令"><a href="#Vue2-0-【第二季】第1节-Vue-directive自定义指令" class="headerlink" title="Vue2.0 【第二季】第1节 Vue.directive自定义指令"></a>Vue2.0 【第二季】第1节 Vue.directive自定义指令</h1><hr><h2 id="一、什么是全局API？"><a href="#一、什么是全局API？" class="headerlink" title="一、什么是全局API？"></a>一、什么是全局API？</h2><p>全局API并不在构造器里，而是先声明<strong>全局</strong>变量或者直接在<strong>Vue</strong>上定义一些新功能，Vue内置了一些全局API，比如我们今天要学习的指令Vue.directive。说的简单些就是，在构造器外部用Vue提供给我们的API函数来定义新的功能。</p><h2 id="二、-Vue-directive自定义指令"><a href="#二、-Vue-directive自定义指令" class="headerlink" title="二、 Vue.directive自定义指令"></a>二、 Vue.directive自定义指令</h2><p>我们在第一季就学习了内部指令，我们也可以定义一些属于自己的指令，比如我们要定义一个v-Da0sy的指令，作用就是让文字变成红色。</p><p>在自定义指令前我们写一个小功能，在页面上有一个数字为10，数字的下面有一个按钮，我们每点击一次按钮后，数字加1。<br>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">&lt;div&gt;{{num}}&lt;/div&gt;</span><br><span class="line">&lt;p&gt;&lt;button @click='add'&gt;ADD&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">num:10</span><br><span class="line">},</span><br><span class="line">methods:{</span><br><span class="line">add:function(){</span><br><span class="line">this.num++;</span><br><span class="line">        } </span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>写好了这个功能，我们现在就自己定义一个全局的指令。我们这里使用<strong>Vue.directive( );</strong><br>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">&lt;div v-da0sy='color'&gt;{{num}}&lt;/div&gt;</span><br><span class="line">&lt;p&gt;&lt;button @click='add'&gt;ADD&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive("da0sy",function(el,binding,vnode){</span><br><span class="line">el.style="color:"+binding.value;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">num:10,</span><br><span class="line">color:'red'</span><br><span class="line">},</span><br><span class="line">methods:{</span><br><span class="line">add:function(){</span><br><span class="line">this.num++;</span><br><span class="line">} </span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>可以看到数字已经变成了红色，说明自定义指令起到了作用。可能您看这个代码还是有些不明白的，比如传入的三个参数到底是什么。</p><h2 id="三、自定义指令中传递的三个参数"><a href="#三、自定义指令中传递的三个参数" class="headerlink" title="三、自定义指令中传递的三个参数"></a>三、自定义指令中传递的三个参数</h2><ul><li><strong>el：指令所绑定的元素，可以用来直接操作DOM。</strong>（这里是div）</li><li><strong>binding：一个对象，包含指令的很多信息。</strong>（这里是对象{name: “da0sy”, rawName: “v-da0sy”, value: “red”, expression: “color”, modifiers: {…}, …}）</li><li><strong>vnode：Vue编译生成的虚拟节点。</strong></li></ul><h2 id="四、自定义指令的生命周期"><a href="#四、自定义指令的生命周期" class="headerlink" title="四、自定义指令的生命周期"></a>四、自定义指令的生命周期</h2><p>自定义指令有五个生命周期（也叫钩子函数），分别是<br><font color="red"><strong>bind，inserted，update，componentUpdated，unbind</strong></font></p><p>1、<strong>bind：</strong>只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个绑定时执行一次的初始化动作。<br>2、<strong>inserted：</strong>被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于document中）。<br>3、<strong>update：</strong>被绑定于元素所在的模板更新时调用，而无论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新。<br>4、<strong>componentUpdated：</strong>被绑定元素所在模板完成一次更新周期时调用。<br>5、<strong>unbind：</strong>只调用一次，指令与元素解绑时调用。</p><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">&lt;div v-da0sy='color'&gt;{{num}}&lt;/div&gt;</span><br><span class="line">&lt;p&gt;&lt;button @click='add'&gt;ADD&lt;/button&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;button onclick="unbind()"&gt;解绑&lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">function unbind(){</span><br><span class="line">app.$destroy();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Vue.directive("da0sy",{</span><br><span class="line">bind:function(el,binding){//被绑定</span><br><span class="line">console.log('1 - bind');</span><br><span class="line">el.style="color:"+binding.value;</span><br><span class="line">},</span><br><span class="line">inserted:function(){//绑定到节点</span><br><span class="line">    console.log('2 - inserted');</span><br><span class="line">},</span><br><span class="line">update:function(){//组件更新</span><br><span class="line">    console.log('3 - update');</span><br><span class="line">},</span><br><span class="line">componentUpdated:function(){//组件更新完成</span><br><span class="line">    console.log('4 - componentUpdated');</span><br><span class="line">},</span><br><span class="line">unbind:function(){//解绑</span><br><span class="line">    console.log('5 - unbind');</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">            </span><br><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">    num:10,</span><br><span class="line">    color:'red'</span><br><span class="line">},</span><br><span class="line">methods:{</span><br><span class="line">    add:function(){</span><br><span class="line">this.num++;</span><br><span class="line">    } </span><br><span class="line">}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>点击ADD按钮后：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>点击unbind解除绑定后：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./5.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第二季】第1节-Vue-directive自定义指令&quot;&gt;&lt;a href=&quot;#Vue2-0-【第二季】第1节-Vue-directive自定义指令&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第二季】第1节 Vue.dire
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第一季】第8节 v-pre &amp; v-cloak &amp; v-once</title>
    <link href="http://tomotoes.com/posts/3dd860b8/"/>
    <id>http://tomotoes.com/posts/3dd860b8/</id>
    <published>2020-03-13T12:37:48.000Z</published>
    <updated>2020-03-20T11:14:21.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第一季】-第8节-v-pre-amp-v-cloak-amp-v-once"><a href="#Vue2-0-【第一季】-第8节-v-pre-amp-v-cloak-amp-v-once" class="headerlink" title="Vue2.0 【第一季】 第8节 v-pre &amp; v-cloak &amp; v-once"></a>Vue2.0 【第一季】 第8节 v-pre &amp; v-cloak &amp; v-once</h1><hr><h2 id="v-pre-指令"><a href="#v-pre-指令" class="headerlink" title="v-pre 指令"></a>v-pre 指令</h2><p>在模板中跳过vue的编译，直接输出<strong>原始值</strong>。就是在标签中加入v-pre就不会输出vue中的data值了。<br>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-pre&gt;{{message}}&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>这时并不会输出我们的message值，不进行渲染，而是直接在网页中显示</p><h2 id="v-cloak-指令"><a href="#v-cloak-指令" class="headerlink" title="v-cloak 指令"></a>v-cloak 指令</h2><p>在vue渲染完指定的整个DOM后才进行显示。它<strong>必须和CSS样式一起使用</strong>：</p><p>可以使用 v-cloak 指令设置样式，这些样式会在 Vue 实例编译结束时，从绑定的 HTML 元素上被移除。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-cloak&gt;{{message}}&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>当网络较慢，网页还在加载 Vue.js ，而导致 Vue 来不及渲染，这时页面就会闪现出 Vue 源代码，再显示渲染的内容。</p><p>我们可以使用 v-cloak 指令来解决这一问题：<br>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app" v-cloak&gt;</span><br><span class="line">{{message}}</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>style中，css代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[v-cloak] {</span><br><span class="line">display: none;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样就会解决屏幕闪动的问题。</p><h2 id="v-once-指令"><a href="#v-once-指令" class="headerlink" title="v-once 指令"></a>v-once 指令</h2><p>在第一次DOM时进行渲染，渲染完成后视为<strong>静态</strong>内容，跳出以后的渲染过程。（相当于只渲染一次）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-once&gt;第一次绑定的值：{{message}}&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;input type="text" v-model="message"&gt;&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第一季】-第8节-v-pre-amp-v-cloak-amp-v-once&quot;&gt;&lt;a href=&quot;#Vue2-0-【第一季】-第8节-v-pre-amp-v-cloak-amp-v-once&quot; class=&quot;headerlink&quot; title=&quot;Vu
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第一季】第7节 v-bind指令</title>
    <link href="http://tomotoes.com/posts/f52403cb/"/>
    <id>http://tomotoes.com/posts/f52403cb/</id>
    <published>2020-03-13T12:37:06.000Z</published>
    <updated>2020-03-20T11:14:53.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第一季】-第7节-v-bind指令"><a href="#Vue2-0-【第一季】-第7节-v-bind指令" class="headerlink" title="Vue2.0 【第一季】 第7节 v-bind指令"></a>Vue2.0 【第一季】 第7节 v-bind指令</h1><hr><h2 id="第7节-v-bind指令"><a href="#第7节-v-bind指令" class="headerlink" title="第7节 v-bind指令"></a>第7节 v-bind指令</h2><p>v-bind是处理<strong>HTML中的标签属性</strong>的<br>例如，我们绑定img上的src属性，进行动态赋值：</p><p>html文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line"> &lt;img v-bind:src="imgSrc" width="200px" /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>在html中我们用v-bind:src=”imgSrc”的动态绑定了src的值，这个值是在vue构造器里的data属性中找到的。</p><p>js文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{    </span><br><span class="line"> imgSrc:'http://a0.att.hudong.com/78/52/01200000123847134434529793168.jpg'</span><br><span class="line">        }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>我们在data对象在中增加了imgSrc属性来供html调用。</p><h3 id="v-bind缩写"><a href="#v-bind缩写" class="headerlink" title="v-bind缩写"></a>v-bind缩写</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 完整语法 --&gt;</span><br><span class="line">&lt;a v-bind:href="url"&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 缩写方法，用冒号代替 --&gt;</span><br><span class="line">&lt;a :href="url"&gt;&lt;/a&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="绑定CSS样式"><a href="#绑定CSS样式" class="headerlink" title="绑定CSS样式"></a>绑定CSS样式</h3><p>在工作中我们经常使用v-bind来绑定css样式：</p><p>在绑定CSS样式时，绑定的值必须在vue中的<strong>data</strong>属性中进行声明。</p><h4 id="1、直接绑定class样式"><a href="#1、直接绑定class样式" class="headerlink" title="1、直接绑定class样式"></a>1、直接绑定class样式</h4><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class="className"&gt;1、绑定class&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>style中的css样式：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.classA{</span><br><span class="line">color: red;</span><br><span class="line">            }</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">className:'classA',</span><br><span class="line">}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h4 id="2、绑定classA并进行判断，在isOK为true时显示样式，在isOk为false时不显示样式。"><a href="#2、绑定classA并进行判断，在isOK为true时显示样式，在isOk为false时不显示样式。" class="headerlink" title="2、绑定classA并进行判断，在isOK为true时显示样式，在isOk为false时不显示样式。"></a>2、绑定classA并进行判断，在isOK为true时显示样式，在isOk为false时不显示样式。</h4><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class="{classA:isOk}"&gt;2、绑定Class中的判断&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>CSS同上；<br>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">isOk:true </span><br><span class="line">}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>另：<br>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class="{classA:isOk}"&gt;2、绑定Class中的判断&lt;/div&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;input type="checkbox" id="isOk" v-model="isOk"&gt;</span><br><span class="line">&lt;label for="isOk"&gt;isOk={{isOk}}&lt;/label&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>CSS样式不变；<br>js代码不变</p><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h4 id="3、绑定class中的数组"><a href="#3、绑定class中的数组" class="headerlink" title="3、绑定class中的数组"></a>3、绑定class中的数组</h4><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class="[classA,classB]"&gt;3、绑定class中的数组&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">classA:'classA',</span><br><span class="line">classB:'classB'</span><br><span class="line">}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h4 id="4、绑定class中使用三元表达式判断"><a href="#4、绑定class中使用三元表达式判断" class="headerlink" title="4、绑定class中使用三元表达式判断"></a>4、绑定class中使用三元表达式判断</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class="isOk?classA:classB"&gt;4、绑定class中的三元表达式判断&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>CSS不变；<br>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">isOk:false,  //false实现classB样式，true实现classA样式</span><br><span class="line">classA:'classA',</span><br><span class="line">classB:'classB'</span><br><span class="line">}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./5.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h4 id="5、绑定style"><a href="#5、绑定style" class="headerlink" title="5、绑定style"></a>5、绑定style</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style="{color:red,fontSize:font}"&gt;5、绑定style&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>CSS不需；<br>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">red:'red',</span><br><span class="line">font:'20px'</span><br><span class="line">}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./6.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h4 id="6、用对象绑定style样式"><a href="#6、用对象绑定style样式" class="headerlink" title="6、用对象绑定style样式"></a>6、用对象绑定style样式</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style="styleObject"&gt;6、用对象绑定style样式&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var app=new Vue({</span><br><span class="line">   el:'#app',</span><br><span class="line">   data:{</span><br><span class="line">       styleObject:{</span><br><span class="line">           fontSize:'24px',</span><br><span class="line">           color:'green'</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./7.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第一季】-第7节-v-bind指令&quot;&gt;&lt;a href=&quot;#Vue2-0-【第一季】-第7节-v-bind指令&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第一季】 第7节 v-bind指令&quot;&gt;&lt;/a&gt;Vue2.0 【第一季
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第一季】第6节 v-model指令</title>
    <link href="http://tomotoes.com/posts/563a9848/"/>
    <id>http://tomotoes.com/posts/563a9848/</id>
    <published>2020-03-13T12:36:37.000Z</published>
    <updated>2020-03-20T11:14:57.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第一季】-第6节-v-model指令"><a href="#Vue2-0-【第一季】-第6节-v-model指令" class="headerlink" title="Vue2.0 【第一季】 第6节 v-model指令"></a>Vue2.0 【第一季】 第6节 v-model指令</h1><hr><h2 id="第6节-v-model指令"><a href="#第6节-v-model指令" class="headerlink" title="第6节 v-model指令"></a>第6节 v-model指令</h2><p>v-model指令，我理解为<strong>绑定数据源</strong>。就是把数据绑定在<strong>特定的表单元素</strong>上，可以很容易的实现双向数据绑定。</p><h3 id="一、一个最简单的双向数据绑定代码："><a href="#一、一个最简单的双向数据绑定代码：" class="headerlink" title="一、一个最简单的双向数据绑定代码："></a>一、一个最简单的双向数据绑定代码：</h3><p>html文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id="app"&gt;</span><br><span class="line">    &lt;p&gt;原始文本信息：{{message}}&lt;/p&gt;</span><br><span class="line">    &lt;h3&gt;文本框&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;v-model:&lt;input type="text" v-model="message"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app=new Vue({</span><br><span class="line">  el:'#app',</span><br><span class="line">  data:{</span><br><span class="line">       message:'hello Vue!'</span><br><span class="line">  }</span><br><span class="line"> })</span><br></pre></td></tr></tbody></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;v-model 实例&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;v-model 实例&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;p&gt;原始文本信息：{{message}}&lt;/p&gt;</span><br><span class="line">            &lt;h3&gt;文本框&lt;/h3&gt;</span><br><span class="line">            &lt;p&gt;v-model:&lt;input type="text" v-model="message"&gt;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    message:'hello Vue!'</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>看一下浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./9.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="二、修饰符"><a href="#二、修饰符" class="headerlink" title="二、修饰符"></a>二、修饰符</h3><ul><li>.lazy：取代 input 监听 change 事件。</li><li>.number：输入字符串转为数字。</li><li>.trim：输入去掉首尾空格。</li></ul><p>完整代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;v-model 实例&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;v-model 实例&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;p&gt;原始文本信息：{{message}}&lt;/p&gt;</span><br><span class="line">            &lt;h3&gt;文本框&lt;/h3&gt;</span><br><span class="line">            &lt;p&gt;v-model：&lt;input type="text" v-model="message"&gt;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;v-model.lazy：&lt;input type="text" v-model.lazy="message"&gt;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;v-model.number：&lt;input type="text" v-model.number="message"&gt;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;v-model.trim：&lt;input type="text" v-model.trim="message"&gt;&lt;/p&gt;</span><br><span class="line">            &lt;!-- 去空格 --&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    message:'hello Vue!'</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>** .lazy**浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./10.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>点击输入文本框外的地方：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./11.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>** .number**浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./12.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>但有一种例外情况：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./13.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>** .trim**浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./14.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="三、文本区域加入数据绑定"><a href="#三、文本区域加入数据绑定" class="headerlink" title="三、文本区域加入数据绑定"></a>三、文本区域加入数据绑定</h3><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea cols="30" rows="10" v-model="message"&gt;&lt;/textarea&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./15.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="四、多选按钮绑定一个值"><a href="#四、多选按钮绑定一个值" class="headerlink" title="四、多选按钮绑定一个值"></a>四、多选按钮绑定一个值</h3><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;多选框绑定一个值&lt;/h3&gt;</span><br><span class="line">&lt;input type="checkbox" id="isTrue" v-model="isTrue"&gt;</span><br><span class="line">&lt;label for="isTrue"&gt;{{isTrue}}&lt;/label&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">    data:{</span><br><span class="line">        isTrue:true</span><br><span class="line">    }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./16.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="五、多选绑定一个数组"><a href="#五、多选绑定一个数组" class="headerlink" title="五、多选绑定一个数组"></a>五、多选绑定一个数组</h3><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;多选绑定一个数组&lt;/h3&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;input type="checkbox" id="Da0sy" value="Da0sy" v-model="web_Names"&gt;</span><br><span class="line">&lt;label for="Da0sy"&gt;Da0sy&lt;/label&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type="checkbox" id="Daisy" value="Daisy" v-model="web_Names"&gt;</span><br><span class="line">&lt;label for="Daisy"&gt;Daisy&lt;/label&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type="checkbox" id="Coisini" value="Coisini" v-model="web_Names"&gt;</span><br><span class="line">&lt;label for="Coisini"&gt;Coisini&lt;/label&gt;&lt;!--这里的label for表示与id为多少的表单元素绑定--&gt;</span><br><span class="line">&lt;p&gt;{{web_Names}}&lt;/p&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./17.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="六、单选按钮绑定数据"><a href="#六、单选按钮绑定数据" class="headerlink" title="六、单选按钮绑定数据"></a>六、单选按钮绑定数据</h3><p>html代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3&gt;单选按钮绑定&lt;/h3&gt;</span><br><span class="line">&lt;input type="radio" id="one" value="男" v-model="sex"&gt;</span><br><span class="line">&lt;label for="one"&gt;男&lt;/label&gt;</span><br><span class="line">&lt;input type="radio" id="two" value="女" v-model="sex"&gt;</span><br><span class="line">&lt;label for="one"&gt;女&lt;/label&gt;</span><br><span class="line">&lt;p&gt;{{sex}}&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>js代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">el:'#app',</span><br><span class="line">data:{</span><br><span class="line">sex:'男'</span><br><span class="line">}</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./18.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第一季】-第6节-v-model指令&quot;&gt;&lt;a href=&quot;#Vue2-0-【第一季】-第6节-v-model指令&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第一季】 第6节 v-model指令&quot;&gt;&lt;/a&gt;Vue2.0 【
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第一季】第5节 v-0n：绑定事件监听器</title>
    <link href="http://tomotoes.com/posts/1d242cb0/"/>
    <id>http://tomotoes.com/posts/1d242cb0/</id>
    <published>2020-03-13T12:36:04.000Z</published>
    <updated>2020-03-20T11:14:47.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第一季】-第5节-v-on：绑定事件监听器"><a href="#Vue2-0-【第一季】-第5节-v-on：绑定事件监听器" class="headerlink" title="Vue2.0 【第一季】 第5节 v-on：绑定事件监听器"></a>Vue2.0 【第一季】 第5节 v-on：绑定事件监听器</h1><hr><h2 id="第五节-v-on：绑定事件监听器"><a href="#第五节-v-on：绑定事件监听器" class="headerlink" title="第五节 v-on：绑定事件监听器"></a>第五节 v-on：绑定事件监听器</h2><p>v-on 就是监听事件，可以用v-on指令监听DOM事件来触发一些javascript代码。</p><h3 id="一、使用绑定事件监听器，编写一个加分减分的程序。"><a href="#一、使用绑定事件监听器，编写一个加分减分的程序。" class="headerlink" title="一、使用绑定事件监听器，编写一个加分减分的程序。"></a>一、使用绑定事件监听器，编写一个加分减分的程序。</h3><p>程序代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;v-on 实例&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;v-on 实例&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            本场比赛得分：{{score}}</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                &lt;button v-on:click="add"&gt;加分&lt;/button&gt;</span><br><span class="line">                &lt;button v-on:click="subtract"&gt;减分&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">                &lt;!-- 还有另一种写法：&lt;button @click="subtract"&gt;减分&lt;/button&gt;&lt;br/&gt; --&gt;</span><br><span class="line">                </span><br><span class="line">&lt;!-- 我们除了绑定click之外，我们还可以绑定其它事件，比如键盘回车事件v-on:keyup.enter,现在我们增加一个输入框，然后绑定回车事件，回车后把文本框里的值加到我们的count上。 绑定事件写法：  --&gt;</span><br><span class="line">                &lt;input type="text" v-on:keyup.enter="onEnter" v-model="score2"&gt;</span><br><span class="line">                &lt;!--这里绑定的是enter键，也可以写键值13，这样按enter键可以进行操作--&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    score:0,</span><br><span class="line">                    score2:1</span><br><span class="line">                },</span><br><span class="line">                methods:{</span><br><span class="line">                    add:function(){</span><br><span class="line">                        this.score++;</span><br><span class="line">                    },</span><br><span class="line">                    subtract:function(){</span><br><span class="line">                        this.score--;</span><br><span class="line">                    },</span><br><span class="line">                    onEnter:function(){</span><br><span class="line">                        this.score=this.score + parseInt(this.score2); //js代码，因为文本框的数字会默认转变成字符串，所以我们需要用parseInt()函数进行整数转换。</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>看一下浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./8.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>附：键盘键值表：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./8.jpg" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第一季】-第5节-v-on：绑定事件监听器&quot;&gt;&lt;a href=&quot;#Vue2-0-【第一季】-第5节-v-on：绑定事件监听器&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第一季】 第5节 v-on：绑定事件监听器&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第一季】第4节 v-text &amp; v-html</title>
    <link href="http://tomotoes.com/posts/2db9414d/"/>
    <id>http://tomotoes.com/posts/2db9414d/</id>
    <published>2020-03-13T12:35:22.000Z</published>
    <updated>2020-03-20T11:15:04.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第一季】第4节-v-text-amp-v-html"><a href="#Vue2-0-【第一季】第4节-v-text-amp-v-html" class="headerlink" title="Vue2.0 【第一季】第4节 v-text &amp; v-html"></a>Vue2.0 【第一季】第4节 v-text &amp; v-html</h1><hr><h2 id="第四节-v-text-amp-v-html"><a href="#第四节-v-text-amp-v-html" class="headerlink" title="第四节  v-text &amp; v-html"></a>第四节  v-text &amp; v-html</h2><p>我们已经会在html中输出data中的值了，我们已经用的是,这种情况是有弊端的，就是当我们网速很慢或者javascript出错时，会暴露我们的，容易引起XSS攻击。Vue给我们提供的v-text,就是解决这个问题的。我们来看代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;{{ message }}&lt;/span&gt;=&lt;span v-text="message"&gt;&lt;/span&gt;&lt;br/&gt;</span><br></pre></td></tr></tbody></table></figure><p>完整代码是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;v-text &amp; v-html&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;v-text &amp; v-html 实例&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;span&gt;{{ message }}&lt;/span&gt;=&lt;span v-text="message"&gt;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    message:'hello Vue!',</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>看一下浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./7.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>但如果在javascript中写有html标签，用v-text是输出不出来的，这时候我们就需要用v-html标签了。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-html="msgHtml"&gt;&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure><p>双大括号会将数据解释为<strong>纯文本</strong>，而非HTML。为了输出真正的HTML，你就需要使用v-html 指令。 需要注意的是：在生产环境中动态渲染HTML是非常危险的，因为容易导致XSS攻击。所以只能在可信的内容上使用v-html，永远不要在用户提交和可操作的网页上使用。 完整代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;v-text &amp; v-html&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;v-text &amp; v-html 实例&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;span&gt;{{ message }}&lt;/span&gt;=&lt;span v-text="message"&gt;&lt;/span&gt;&lt;br/&gt;</span><br><span class="line">            &lt;span v-html="dodo"&gt;&lt;/span&gt;  &lt;!--此方式引起xss攻击--&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    message:'hello Vue!',</span><br><span class="line">                    dodo:'&lt;h2&gt;hello world!&lt;/h2&gt;'</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第一季】第4节-v-text-amp-v-html&quot;&gt;&lt;a href=&quot;#Vue2-0-【第一季】第4节-v-text-amp-v-html&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第一季】第4节 v-text &amp;am
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第一季】第3节 v-for指令：解决模板循环问题</title>
    <link href="http://tomotoes.com/posts/81cd718b/"/>
    <id>http://tomotoes.com/posts/81cd718b/</id>
    <published>2020-03-13T12:34:37.000Z</published>
    <updated>2020-03-20T11:15:11.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第一季】-第3节-v-for指令：解决模板循环问题"><a href="#Vue2-0-【第一季】-第3节-v-for指令：解决模板循环问题" class="headerlink" title="Vue2.0 【第一季】 第3节 v-for指令：解决模板循环问题"></a>Vue2.0 【第一季】 第3节 v-for指令：解决模板循环问题</h1><hr><h2 id="第三节-v-for-指令"><a href="#第三节-v-for-指令" class="headerlink" title="第三节 v-for 指令"></a>第三节 v-for 指令</h2><p>v-for指令是循环渲染一组data中的数组，v-for 指令需要以<font color="red"> item in items </font>形式的特殊语法，items 是源数据<strong>数组</strong>并且item是数组元素迭代的别名。</p><h3 id="一、基本用法："><a href="#一、基本用法：" class="headerlink" title="一、基本用法："></a>一、基本用法：</h3><p>模板写法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for="item in items"&gt;</span><br><span class="line">        {{item}}</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></tbody></table></figure><p>js写法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue({</span><br><span class="line">     el:'#app',</span><br><span class="line">     data:{</span><br><span class="line">         items:[20,23,18,65,32,19,54,56,41]</span><br><span class="line">     }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p><strong>v-for.html</strong>完整写法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;V-for 案例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;v-for指令用法&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">           &lt;li v-for="item in items"&gt;</span><br><span class="line">                {{item}}</span><br><span class="line">           &lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:{</span><br><span class="line">                items:[20,23,18,65,32,19,54,56,41]</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>这是一个最基础的循环，先在js里定义了items数组，然后在模板中用v-for循环出来，需要注意的是，你需要哪个html标签循环，v-for就写在哪个上边。</p><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><h3 id="二、排序"><a href="#二、排序" class="headerlink" title="二、排序"></a>二、排序</h3><p>我们已经顺利的输出了我们定义的数组，但是我需要在输出之前给数组排个序，那我们就用到了Vue的<strong>computed:</strong>属性。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed:{</span><br><span class="line">    sortItems:function(){</span><br><span class="line">          return this.items.sort();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们在computed里新声明了一个对象<strong>sortItems</strong>，如果不重新声明会污染原来的数据源，这是Vue不允许的，所以你要重新声明一个对象。</p><p>相应的把：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for="item in items"&gt;</span><br><span class="line">    {{item}}</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></tbody></table></figure><p>改成：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for="item in sortItems"&gt;</span><br><span class="line">    {{item}}</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></tbody></table></figure><p>如果一切顺利的话，你已经看到了结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>但是这个小程序还是有个小Bug的，现在我把数组修改成这样：</p><blockquote><p>items:[20,23,18,65,32,19,5,56,41]</p></blockquote><p>我们把其中的54修改成了5，我们再看一下结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>我们可以自己编写一个方法<strong>sortNumber</strong>，然后传给我们的<strong>sort函数</strong>解决这个Bug：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sortNumber(a,b){</span><br><span class="line">            return a-b</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果不知道方法的位置，看一下完整的代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;V-for 案例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;v-for指令用法&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">           &lt;li v-for="item in sortItems"&gt;</span><br><span class="line">                {{item}}</span><br><span class="line">           &lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:{</span><br><span class="line">                items:[20,23,18,65,32,19,5,56,41]</span><br><span class="line">            },</span><br><span class="line">            computed:{</span><br><span class="line">                sortItems:function(){</span><br><span class="line">                return this.items.sort(sortNumber);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        function sortNumber(a,b){</span><br><span class="line">            return a-b</span><br><span class="line">            }</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>再次看一下浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./5.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>（这是<font color="red"><strong>重点</strong></font>，工作中常用。）</p><h3 id="三、对象循环输出"><a href="#三、对象循环输出" class="headerlink" title="三、对象循环输出"></a>三、对象循环输出</h3><p>我们上边循环的都是数组，那我们来看一个<strong>对象类型</strong>的循环是如何输出的。<br>我们先定义个数组，数组里边是<strong>对象数据</strong>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">students:[</span><br><span class="line">{name:'Da0sy',age:21}, </span><br><span class="line">{name:'Daisy',age:19}, </span><br><span class="line">{name:'Coisini',age:20}, </span><br><span class="line">{name:'angelrain',age:18}</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>在模板中输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">   &lt;li v-for="student in sortStudents"&gt;</span><br><span class="line">       {{student.name}} - {{student.age}}</span><br><span class="line">   &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></tbody></table></figure><p>加入索引序号：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//数组对象方法排序:</span><br><span class="line">function sortByKey(array,key){</span><br><span class="line">    return array.sort(function(a,b){</span><br><span class="line">      var x=a[key];</span><br><span class="line">      var y=b[key];</span><br><span class="line">      return ((x&lt;y)?-1:((x&gt;y)?1:0));</span><br><span class="line">   });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>有了数组的排序方法，在computed中进行调用排序</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sortStudents:function(){</span><br><span class="line">     return sortByKey(this.students,'age');</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br><span class="line">    &lt;title&gt;v-for 实例&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;v-for 实例&lt;/h1&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div id="app"&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for="item in sortItems"&gt;</span><br><span class="line">                    {{item}}</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li v-for="student in sortStudents"&gt;</span><br><span class="line">                    {{student.name}}-{{student.age}}</span><br><span class="line">                &lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type="text/javascript"&gt;</span><br><span class="line">            var app = new Vue({</span><br><span class="line">                el:'#app',</span><br><span class="line">                data:{</span><br><span class="line">                    items:[53,23,7,14,54,36,28],</span><br><span class="line">                    students:[</span><br><span class="line">                        {name:'Da0sy',age:21}, </span><br><span class="line">                        {name:'Coisini',age:20}, </span><br><span class="line">                        {name:'Daisy',age:19}, </span><br><span class="line">                        {name:'angelrain',age:18}</span><br><span class="line">                    ]</span><br><span class="line">                },</span><br><span class="line">                computed:{</span><br><span class="line">                    sortItems:function(){</span><br><span class="line">                        return this.items.sort(sortNumber);</span><br><span class="line">                    },</span><br><span class="line">                    sortStudents:function(){</span><br><span class="line">                        return sortByKey(this.students,'age');</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">            function sortNumber(a,b){</span><br><span class="line">                return a-b;</span><br><span class="line">            }</span><br><span class="line">            //数组对象方法排序:</span><br><span class="line">            function sortByKey(array,key){</span><br><span class="line">                return array.sort(function(a,b){</span><br><span class="line">                var x=a[key];</span><br><span class="line">                var y=b[key];</span><br><span class="line">                return ((x&lt;y)?-1:((x&gt;y)?1:0));</span><br><span class="line">            });</span><br><span class="line">            }</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>看一下浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./6.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第一季】-第3节-v-for指令：解决模板循环问题&quot;&gt;&lt;a href=&quot;#Vue2-0-【第一季】-第3节-v-for指令：解决模板循环问题&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第一季】 第3节 v-for指令：解
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第一季】第2节 v-if &amp; v-else &amp; v-show指令</title>
    <link href="http://tomotoes.com/posts/e38668cc/"/>
    <id>http://tomotoes.com/posts/e38668cc/</id>
    <published>2020-03-13T12:28:30.000Z</published>
    <updated>2020-03-20T11:15:14.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第一季】第2节-v-if-v-else-v-show-指令"><a href="#Vue2-0-【第一季】第2节-v-if-v-else-v-show-指令" class="headerlink" title="Vue2.0 【第一季】第2节 v-if v-else v-show 指令"></a>Vue2.0 【第一季】第2节 v-if v-else v-show 指令</h1><hr><h2 id="第2节-v-if-v-else-v-show-指令"><a href="#第2节-v-if-v-else-v-show-指令" class="headerlink" title="第2节 v-if v-else v-show 指令"></a>第2节 v-if v-else v-show 指令</h2><h3 id="2-1-v-if指令、v-else指令："><a href="#2-1-v-if指令、v-else指令：" class="headerlink" title="2.1 v-if指令、v-else指令："></a>2.1 v-if指令、v-else指令：</h3><blockquote><p>是vue的一个内部指令，用在html中。<br>用来判断是否加载html的DOM，比如我们模拟一个用户登录状态，在用户登录后现实用户名称。</p></blockquote><ul><li><strong>v-if.html</strong>代码：<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang="en"&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset="UTF-8"&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="../assets/js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;title&gt;v-if &amp; v-show &amp; v-else&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;v-if 判断是否加载&lt;/h1&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div id="app"&gt;</span><br><span class="line">        &lt;div v-if="isLogin"&gt;你好：Da0sy&lt;/div&gt;  //关键代码</span><br><span class="line">        &lt;div v-else&gt;请登录后操作&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type="text/javascript"&gt;</span><br><span class="line">        var app=new Vue({</span><br><span class="line">            el:'#app',</span><br><span class="line">            data:{</span><br><span class="line">               isLogin:true</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure></li></ul><p>浏览器效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>这里我们在vue的data里定义了isLogin的值，当它为true时，网页就会显示：你好：Da0sy，如果为false时，就显示请登录后操作。</p><h3 id="2-2-v-show的使用："><a href="#2-2-v-show的使用：" class="headerlink" title="2.2 v-show的使用："></a>2.2 v-show的使用：</h3><p>调整css中display属性，DOM已经加载，只是CSS控制没有显示出来。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show="isLogin"&gt;你好：Da0sy&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="v-if-和v-show的区别："><a href="#v-if-和v-show的区别：" class="headerlink" title="v-if 和v-show的区别："></a>v-if 和v-show的区别：</h4><ul><li>v-if：判断是否加载，可以减轻服务器的压力，在需要时加载。</li><li>v-show：调整css dispaly属性，可以使客户端操作更加流畅。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第一季】第2节-v-if-v-else-v-show-指令&quot;&gt;&lt;a href=&quot;#Vue2-0-【第一季】第2节-v-if-v-else-v-show-指令&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第一季】第2节 v-
      
    
    </summary>
    
    
    
      <category term="vue 2.0" scheme="http://tomotoes.com/tags/vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 【第一季】第1节 走进我的Vue2.0</title>
    <link href="http://tomotoes.com/posts/7ab8779e/"/>
    <id>http://tomotoes.com/posts/7ab8779e/</id>
    <published>2020-03-12T07:55:26.000Z</published>
    <updated>2020-03-20T10:26:19.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-0-【第一季】内部指令"><a href="#Vue2-0-【第一季】内部指令" class="headerlink" title="Vue2.0 【第一季】内部指令"></a>Vue2.0 【第一季】内部指令</h1><p>记录一下我的代码地址：D:/Code/Vue<br>编辑器：VS code</p><hr><blockquote><p><strong>前置知识：</strong><br>1.HTML的基础知识，你需要达到中级水平，写前端页面的结构代码完全没有问题。<br>2.CSS的基础知识，最好做过半年以上的切图和布局，最好了解CSS3的知识。<br>3.Javascript的基础知识，对基本语法掌握，要求不高。<br>4.node.js初级知识，只需要会npm的使用和项目初始化就可以了。（可不需）</p></blockquote><h2 id="第1节-走进我的Vue2-0"><a href="#第1节-走进我的Vue2-0" class="headerlink" title="第1节  走进我的Vue2.0"></a>第1节  走进我的Vue2.0</h2><ul><li><p>下载<strong>vue2.0</strong>的两个版本：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p><pre><code>“学习” -&gt; "教程" -&gt; "安装" -&gt; "开发版本和生产版本都下载"</code></pre></li><li><p>项目结构搭建<br>   D盘新建文件夹<strong>Code</strong>，在Code里面新建文件夹<strong>Vue</strong>，将文件夹Vue拖进VS code；<br>   VS中的操作：（js中的两个文件直接从刚才下载的文件夹拖入）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p></p></li><li><p><strong>index.html</strong> 的内容:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue.js实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue2.0实例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./example/helloworld.html"</span>&gt;</span>Hello World实例<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>至此项目基本建完，需要安装<strong>live-server</strong>（VS终端）：</p><blockquote><p>cnpm install -g live-server</p></blockquote></li></ul><p>在项目目录中打开：</p><blockquote><p>live-server</p></blockquote><p>可以看到浏览器启动的页面：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p>关掉<strong>ctrl+c</strong>终端服务，初始化一下前端效果：</p><blockquote><p>cnpm init<br>name：vue 小写字母就行<br>description：Vue Demo<br>entry point：回车即可，这里不改<br>test command：回车<br>git repository：回车，有git库就写<br>keywords：回车，可不写<br>author：Cardiac（写自己的）</p></blockquote><p>建完以后，在Vue中就生成<strong>package.json</strong>文件（方便以后进行包的管理）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><ul><li>可以进行第一个文件的编写，在example文件夹下新建helloworld.html</li></ul><p><strong>helloworld.html</strong> 的内容:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../assets/js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">            {{message}}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> app = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="actionscript">                el:<span class="string">'#app'</span>,</span></span><br><span class="line">                data:{</span><br><span class="line"><span class="actionscript">                    message:<span class="string">'hello Vue!'</span></span></span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>启动服务器live-server，就可看到页面，点击Hello World实例链接：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue2-0-【第一季】内部指令&quot;&gt;&lt;a href=&quot;#Vue2-0-【第一季】内部指令&quot; class=&quot;headerlink&quot; title=&quot;Vue2.0 【第一季】内部指令&quot;&gt;&lt;/a&gt;Vue2.0 【第一季】内部指令&lt;/h1&gt;&lt;p&gt;记录一下我的代码地址：D:/
      
    
    </summary>
    
    
    
      <category term="Vue 2.0" scheme="http://tomotoes.com/tags/Vue-2-0/"/>
    
  </entry>
  
  <entry>
    <title>初学Git</title>
    <link href="http://tomotoes.com/posts/a8d530d8/"/>
    <id>http://tomotoes.com/posts/a8d530d8/</id>
    <published>2020-03-12T02:12:21.000Z</published>
    <updated>2020-03-20T10:26:19.896Z</updated>
    
    <content type="html"><![CDATA[<p>我的练习地址：D: \learngit\node.txt</p><hr><h2 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h2><ul><li>Git是用<strong>C语言</strong>开发的；</li><li>Git是<strong>分布式</strong>版本控制系统：没有“中央服务器”、不需要联网、安全性高很多（每个人电脑里都有完整的版本库）；</li><li>Git有极其强大的<strong>分支管理</strong>。</li></ul><h2 id="安装Git后创建版本库（又名仓库，repository）"><a href="#安装Git后创建版本库（又名仓库，repository）" class="headerlink" title="安装Git后创建版本库（又名仓库，repository）"></a>安装Git后创建版本库（又名仓库，repository）</h2><p>选择一个合适的地方，创建一个空目录：</p><blockquote><p>$ cd D:/ // 切换盘符，我这里进入D盘</p></blockquote><blockquote><p>$ cd .. // 回到文件上一层(注: cd与..中间有个空格)</p></blockquote><blockquote><p>$ cd ~ // 回到当前目录的主目录</p></blockquote><blockquote><p>$ mkdir Git // 创建文件夹Git</p></blockquote><blockquote><p>$ touch fileName // 新建文件</p></blockquote><blockquote><p>$ vi fileName // 编辑文件</p></blockquote><blockquote><p>$  press i button // 开始进入编辑状态</p></blockquote><blockquote><p>$ press the Esc button // 退出vim编辑区（一直按住ESC，按两次大写的Z；或者按ESC键然后输入::q!即可不保存退出）</p></blockquote><blockquote><p>$ :wq // 退出编辑状态, 回到命令窗口（这是保存退出）</p></blockquote><blockquote><p>$ mkdir learngit // 创建文件夹learngit（我的在D盘中创建） </p></blockquote><blockquote><p>$ pwd // 显示当前路径/e/Git/learngit</p></blockquote><blockquote><p>$ git init // 将当前目录变成一个Git可以管理的仓库</p></blockquote><blockquote><p>$ touch+文件名 // 直接新建一个文件（node.txt）</p></blockquote><blockquote><p>$ git add node.txt // 将文件node.txt添加到Git仓库（把文件修改添加到暂存区）</p></blockquote><blockquote><p>$ git commit -m “wrote a node.txt.” // 将文件提交到仓库（把暂存区的所有内容提交到当前分支）,命令执行成功会告诉你1 file changed: 1个文件被改动（我们新添加的node.txt文件）；2 insertions: 插入了两行内容（node.txt有两行内容）。</p></blockquote><blockquote><p>$ git add file1.txt // 添加file1.txt文件</p></blockquote><blockquote><p>$ git add file2.txt file3.txt // 同时添加file2.txt和file3.txt两个文件（可多次）</p></blockquote><blockquote><p>$ git commit -m “add 3 files.” // 一次性提交3个文件（commit可以一次提交很多文件）</p></blockquote><h2 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h2><blockquote><h3 id="2-1-版本回退"><a href="#2-1-版本回退" class="headerlink" title="2.1 版本回退"></a>2.1 版本回退</h3></blockquote><blockquote><p>$ git status // 查看当前仓库状态（仓库下的工作区文件是否被修改过）</p></blockquote><blockquote><p>$ git diff readme.txt // 查看工作区的node.txt与缓存区的node.txt的区别</p></blockquote><blockquote><p>$ git log // 查看最近到最远的提交记录（详情: commit id + Author + Date + comment）</p></blockquote><blockquote><p>$ git log –pretty=oneline // 如果嫌输出信息太多，可以试试查看最近到最远的提交记录（简写：commit id + comment）。看到的一大串类似10c7e…的是commit id(版本号)</p></blockquote><blockquote><p>$ git reset –hard HEAD^ // 回到上一个版本（HEAD: 当前版本，HEAD^: 上一个版本，HEAD^^: 上上一个版本，HEAD~100: 往上100个版本）</p></blockquote><blockquote><p>$ git reset –hard 1234567 // 回到指定版本号commit id（此处：commit id 假设为1234567<strong>**</strong>，版本号不需要写全，Git会根据commit id的前几位自动寻找对应的版本）</p></blockquote><blockquote><p>$ cat readme.txt // 查看readme.txt的内容</p></blockquote><blockquote><p>$ git reflog // 查看每一次命令记录历史，确保能回到任意版本　　</p></blockquote><blockquote><h3 id="2-2-工作区与暂存区"><a href="#2-2-工作区与暂存区" class="headerlink" title="2.2 工作区与暂存区"></a>2.2 工作区与暂存区</h3></blockquote><blockquote><p>$ git diff readme.txt // 比较工作区（working directory）和暂存区（stage/index）的区别；工作区即电脑里能看到的目录，例如learngit文件夹。</p></blockquote><blockquote><p><strong>版本库</strong>：工作区有一个隐藏目录<strong>.git</strong>，这个不算是工作区，而是Git的版本库。<br>Git的版本库里存了很多东西，最重要的就是<strong>stage</strong>（或叫index）的<strong>暂存区</strong>，还有Git为我们自动创建的第一个分支<strong>master</strong>，以及指向master的一个指针叫<strong>HEAD</strong>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./TIM截图20200311155827.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><br>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：<br>第一步是用git add把文件添加进去，实际上就是把文件修改添加到<strong>暂存区</strong>；<br>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到<strong>当前分支</strong>。<br>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。<br>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。<p></p></blockquote><blockquote><p>$ git diff –cached // 比较暂存区（stage/index）和分支（master）的区别</p></blockquote><blockquote><h3 id="2-3-管理修改（详见1-创建版本库中的命令）"><a href="#2-3-管理修改（详见1-创建版本库中的命令）" class="headerlink" title="2.3 管理修改（详见1. 创建版本库中的命令）"></a>2.3 管理修改（详见1. 创建版本库中的命令）</h3></blockquote><blockquote><h3 id="2-4-撤销修改"><a href="#2-4-撤销修改" class="headerlink" title="2.4 撤销修改"></a>2.4 撤销修改</h3></blockquote><blockquote><p>$ git checkout – node.txt // 撤销修改：1. 文件在添加到缓存区前修改，则回退到原工作区状态；2. 文件在添加到缓存区后修改，则回退到原缓存区状态。也即是将node.txt撤回到最近一次git add或git commit状态（注：–表示在当前分支，如果没有，则切换到另一个分支）</p></blockquote><blockquote><p>$ cat node.txt // 查看文件内容</p></blockquote><blockquote><p>$ git reset HEAD node.txt // 1. 回退到最新版本；2. 将暂存区的修改回退到工作区</p></blockquote><blockquote><h3 id="2-5-删除文件"><a href="#2-5-删除文件" class="headerlink" title="2.5 删除文件"></a>2.5 删除文件</h3></blockquote><blockquote><p>$ rm test.txt // 删除工作区文件（类似于手动删除）</p></blockquote><blockquote><p>$ git status // 查看当前工作区与缓存区状态</p></blockquote><blockquote><p>$ git rm test.txt // 情况1：确认删除</p></blockquote><blockquote><p>$ git commit -m “remove test.txt” // 情况1：确认删除后，提交到版本库</p></blockquote><blockquote><p>$ git checkout – test.txt // 情况2：误删，需要回退（即：用版本库里的版本替换工作区的版本）</p></blockquote><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>注册GitHub账号（因为你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以需要创建SSH kEY）:</p><ul><li>创建SSH Key。在用户主目录下，看看有没有<strong>.ssh</strong>目录，如果有，再看看这个目录下有没有<strong>id_rsa</strong>(私钥，不能泄露）和<strong>id_rsa.pub</strong>（公钥）这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开<strong>Git Bash</strong>），创建SSH Key：<blockquote><p>$  ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com">youremail@example.com</a>“</p></blockquote></li></ul><ul><li>把邮件地址换成自己的邮件地址，一路回车，使用默认值即可。</li><li>登录GitHub，打开<strong>“Account settings”</strong>，<strong>“SSH Keys”</strong>页面；<br>然后，点<strong>“Add SSH Key”</strong>，填上任意Title，在Key文本框里粘贴<strong>id_rsa.pub</strong>文件的内容；<br>点<strong>“Add Key”</strong>，你就应该看到已经添加的Key，这样就在本地创建了一个Git仓库，要想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。</li></ul><p>首先，登陆GitHub，点击右上角<strong>“Create a new repo”</strong>按钮，创建一个新的仓库；<br>在<strong>Repository name</strong>填入learngit，其他保持默认设置，点击<strong>“Create repository”</strong>按钮，就成功地创建了一个新的Git仓库；<br>目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><blockquote><h3 id="3-1-添加远程库"><a href="#3-1-添加远程库" class="headerlink" title="3.1 添加远程库"></a>3.1 添加远程库</h3><p>$ git remote add origin git@server-name:path/repo-name.git<br>// 关联一个远程仓库，如： git remote add origin <a href="mailto:git@github.com">git@github.com</a>:GitHub用户名/learngit.git</p><p>// 添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：<br>git push -u origin master // 第一次推送master分支的所有内容<br><strong>注：</strong>在GitHub上创建新仓库时，如果勾选了README.md选项时，可能会出现下面错误，提示：远程仓库有readme.txt,而本地仓库没有README.txt,此时应该先进行合并文件，再进行推送。</p></blockquote><blockquote><p>$ git pull –rebase origin master // 推送之前，进行合并</p><p>合并文件之后，发现本地仓库中多了README.md文件，此时再进行推送修改到远程仓库就可以了。</p><p>再次执行：git push -u origin master, 即可推送本地仓库到远程仓库了</p><p>$ git push origin master // 以后每次本地修改更新后，推送最新修改</p></blockquote><h3 id="3-2-从远程库克隆"><a href="#3-2-从远程库克隆" class="headerlink" title="3.2 从远程库克隆"></a>3.2 从远程库克隆</h3><p>假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。<br>首先，登陆GitHub，创建一个新的仓库，名字叫<strong>gitskills</strong>，勾选<strong>Initialize this repository with a README</strong>，这样GitHub会自动为我们创建一个<strong>README.md</strong>文件。创建完毕后，可以看到README.md文件：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./1.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p></p><blockquote><p>$ git clone <a href="mailto:git@github.com">git@github.com</a>:Da0sy/gitskills.git  // 以SSH方式克隆一个本地库，默认的git://使用ssh，但也可使用https等协议，看以下这种方式：</p><p>$ git clone <a href="https://github.com/Da0sy/gitskills.git" target="_blank" rel="noopener">https://github.com/Da0sy/gitskills.git</a> // 以Https协议方式克隆<br>然后进入gitskills目录看，已经有README.md文件了。但这种方式没有上一种快。</p></blockquote><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<font color="red"> master </font>分支。<font color="red"> HEAD </font>严格来说不是指向提交，而是指向<font color="red"> master </font>，<font color="red"> master </font>才是指向提交的，所以，<font color="red"> HEAD </font>指向的就是当前分支。</p><p>一开始的时候，<font color="red"> master </font>分支是一条线，<font color="red"> Git </font>用<font color="red"> master </font>指向最新的提交，再用<font color="red"> HEAD </font>指向<font color="red"> master </font>，就能确定当前分支，以及当前分支的提交点：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./2.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p></p><p>每次提交，<font color="red"> master </font>分支都会向前移动一步，这样，随着你不断提交，<font color="red"> master </font>分支的线也越来越长。</p><p>当我们创建新的分支，例如<font color="red"> dev </font>时，<font color="red"> Git </font>新建了一个指针叫<font color="red"> dev </font>，指向<font color="red"> master </font>相同的提交，再把<font color="red"> HEAD </font>指向<font color="red"> dev </font>，就表示当前分支在<font color="red"> dev </font>上：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./3.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p></p><p><font color="red"> Git </font>创建一个分支很快，除了增加一个<font color="red"> dev </font>指针，改改<font color="red"> HEAD </font>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对<font color="red"> dev </font>分支了，比如新提交一次后，<font color="red"> dev </font>指针往前移动一步，而<font color="red"> master </font>指针不变：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./4.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p></p><p>假如我们在<font color="red"> dev </font>上的工作完成了，就可以把<font color="red"> dev </font>合并到<font color="red"> master </font>上。<font color="red"> Git </font>怎么合并呢？最简单的方法，就是直接把<font color="red"> master </font>指向<font color="red"> dev </font>的当前提交，就完成了合并：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./5.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p></p><p>合并完分支后，甚至可以删除<font color="red"> dev </font>分支。删除<font color="red"> dev </font>分支就是把<font color="red"> dev </font>指针给删掉，删掉后，我们就剩下了一条<font color="red"> master </font>分支：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="./6.png" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><p></p><h3 id="4-1-创建与合并分支"><a href="#4-1-创建与合并分支" class="headerlink" title="4.1 创建与合并分支"></a>4.1 创建与合并分支</h3><blockquote><p>git branch // 查看所有分支（当前分支以‘*’标记）</p></blockquote><blockquote><p>git branch name // 创建分支（如：git branch dev）</p></blockquote><blockquote><p>git checkout name 或者git switch name// 切换分支  </p></blockquote><blockquote><p>git checkout -b name 或者git switch -c name// 创建切换分支（如：git checkout -b dev）</p></blockquote><blockquote><p>git merge name // 合并分支(name)到当前分支上</p></blockquote><blockquote><p>git branch -d name // 删除该分支</p></blockquote><h3 id="4-2-解决冲突"><a href="#4-2-解决冲突" class="headerlink" title="4.2 解决冲突"></a>4.2 解决冲突</h3><blockquote><p>git log –graph // 查看分支合并图</p></blockquote><blockquote><p>git log –graph –pretty=oneline –abbrev-commit // 查看分支合并缩略图</p></blockquote><h3 id="4-3-分支管理策略"><a href="#4-3-分支管理策略" class="headerlink" title="4.3 分支管理策略"></a>4.3 分支管理策略</h3><blockquote><p> git merge –no-ff -m “注释” dev // 合并后的分支有历史记录，而Fast-Forward合并之后，分支没有历史记录</p></blockquote><h3 id="4-4-Bug分支"><a href="#4-4-Bug分支" class="headerlink" title="4.4 Bug分支"></a>4.4 Bug分支</h3><blockquote><p>git stash // 隐藏分支工作现场，为修复bug准备</p></blockquote><blockquote><p>git stash list // 查看有哪些分支隐藏的工作现场，为恢复工作现场做准备</p></blockquote><blockquote><p>git stash apply // 恢复工作现场，但不删除存储的stash内容，结合git stash drop进行删除</p></blockquote><blockquote><p>git stash drop // 删除存储的stash内容，恢复到隐藏前的工作现场</p></blockquote><blockquote><p>git stash pop // 恢复到隐藏前的工作现场，相当于git stash apply和git stash drop</p></blockquote><blockquote><p>git stash apply stash@{0} // 可以多次stash，通过git stash list查看所有的stash，然后可以恢复到指定的隐藏的工作现场</p></blockquote><h3 id="4-5-Feature分支"><a href="#4-5-Feature分支" class="headerlink" title="4.5 Feature分支"></a>4.5 Feature分支</h3><blockquote><p>注：当添加一个feature时，最好新建一个分支：git checkout -b name</p></blockquote><blockquote><p>git branch -D name // 强行删除一个没有被合并到主分支的分支</p></blockquote><h3 id="4-6-多人协作（最好结合工作场景理解）"><a href="#4-6-多人协作（最好结合工作场景理解）" class="headerlink" title="4.6 多人协作（最好结合工作场景理解）"></a>4.6 多人协作（最好结合工作场景理解）</h3><blockquote><p>git remote -v // 查看远程库详细信息</p></blockquote><blockquote><p>git push origin dev // push本地dev分支到远程dev</p></blockquote><blockquote><p>git push origin master // push本地master分支到远程master（时刻保持同步）</p></blockquote><blockquote><p>git pull // 将最新的pull/dev(master)爬下来</p></blockquote><blockquote><p>git checkout -b branch-name origin/branch-name // 在本地创建和远程分支对应的分支</p></blockquote><blockquote><p>git branch –set-upstream-to=origin/branch-name dev // 建立本地分支和远程分支的关联</p></blockquote><h3 id="4-7-Rebase"><a href="#4-7-Rebase" class="headerlink" title="4.7 Rebase"></a>4.7 Rebase</h3><blockquote><p>git rebase // 将本地未push的分支提交整理成直线，利于查看</p></blockquote><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><blockquote><p>git tag tagname // 创建标签</p></blockquote><blockquote><p>git tag // 查看所有标签</p></blockquote><blockquote><p>git tag tagname commitId // 为某次提交创建指定标签</p></blockquote><blockquote><p>git show tagname // 查看指定标签具体内容</p></blockquote><blockquote><p>git tag -a tagname -m “v0.1 released” commitId // 为某次指定的提交创建标签，同时添加标签注释</p></blockquote><blockquote><p>git tag -d tagname // 删除某个标签</p></blockquote><blockquote><p>git push origin tagname // 推送某个标签到远程库</p></blockquote><blockquote><p>git push origin –tags // 一次性推送所有标签到远程库</p></blockquote><blockquote><p>git tag -d v0.9 // 删除远程库标签（第一步：删除本地库标签）</p></blockquote><blockquote><p>git push origin :refs/tags/v0.9 // 删除远程库标签（第二步：从远程库删除标签）</p></blockquote><h2 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h2><blockquote><p>在GitHub上，可以自己fork任意开源仓库，自己拥有fork后的仓库的读与写操作权限，可以推送pull request给官方仓库贡献代码。</p></blockquote><h2 id="使用码云（与GitHub类似，用到的时候，再注册使用练习，毕竟GitHub更加NB一些！）"><a href="#使用码云（与GitHub类似，用到的时候，再注册使用练习，毕竟GitHub更加NB一些！）" class="headerlink" title="使用码云（与GitHub类似，用到的时候，再注册使用练习，毕竟GitHub更加NB一些！）"></a>使用码云（与GitHub类似，用到的时候，再注册使用练习，毕竟GitHub更加NB一些！）</h2><h2 id="自定义Git（这里只是简单入门）"><a href="#自定义Git（这里只是简单入门）" class="headerlink" title="自定义Git（这里只是简单入门）"></a>自定义Git（这里只是简单入门）</h2><blockquote><p>git config –global color.ui true // 让Git显示颜色</p></blockquote><h3 id="8-1-忽略特殊文件"><a href="#8-1-忽略特殊文件" class="headerlink" title="8.1 忽略特殊文件"></a>8.1 忽略特殊文件</h3><blockquote><p>忽略某些文件时，需要编写.gitignore文件，文件本身要放到版本库中，Git可以对.gitignore做版本管理！（注：不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore）" target="_blank" rel="noopener">https://github.com/github/gitignore）</a></p></blockquote><h3 id="8-2-配置别名"><a href="#8-2-配置别名" class="headerlink" title="8.2 配置别名"></a>8.2 配置别名</h3><blockquote><p>git config –global alias.st status // 将st作为status的别名，以后就可以git st查看暂存区与工作区的状态了（还有类似co:checkout, ci:commit, br:branch，–global:是针对于当前用户起作用的，如果不加，则只针对于当前仓库）</p></blockquote><blockquote><p>cat .gitignore // 查看当前文件所有配置信息（包括别名信息）</p></blockquote><h3 id="8-3-搭建Git服务器"><a href="#8-3-搭建Git服务器" class="headerlink" title="8.3 搭建Git服务器"></a>8.3 搭建Git服务器</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我的练习地址：D: \learngit\node.txt&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Git的诞生&quot;&gt;&lt;a href=&quot;#Git的诞生&quot; class=&quot;headerlink&quot; title=&quot;Git的诞生&quot;&gt;&lt;/a&gt;Git的诞生&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Git是用&lt;s
      
    
    </summary>
    
    
    
      <category term="Git" scheme="http://tomotoes.com/tags/Git/"/>
    
  </entry>
  
</feed>
